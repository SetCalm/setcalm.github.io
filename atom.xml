<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeff</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/SetCalm/setcalm.github.io/"/>
  <updated>2018-12-18T18:59:46.584Z</updated>
  <id>https://github.com/SetCalm/setcalm.github.io/</id>
  
  <author>
    <name>Jeff Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cs</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/cs.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/cs.html</id>
    <published>2022-12-18T18:58:59.000Z</published>
    <updated>2018-12-18T18:59:46.584Z</updated>
    
    <content type="html"><![CDATA[<p>由于以前准备用七牛作为图床，发现测试域名只有一月试用期，需要绑定域名。暂时没有好的图床，年后准备搭建个NAS做图床，网站暂时只能看无图的。</p><p>另外暂时文章都没有仔细排版，现在抓紧学习嵌入式ARM开发阶段，提后有时间再排版。</p><p>谢谢！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于以前准备用七牛作为图床，发现测试域名只有一月试用期，需要绑定域名。暂时没有好的图床，年后准备搭建个NAS做图床，网站暂时只能看无图的。&lt;/p&gt;
&lt;p&gt;另外暂时文章都没有仔细排版，现在抓紧学习嵌入式ARM开发阶段，提后有时间再排版。&lt;/p&gt;
&lt;p&gt;谢谢！&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018-12-14-LS1-开发之系统安装</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/LS2-%E5%BC%80%E5%8F%91%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/LS2-开发之系统安装.html</id>
    <published>2018-12-18T09:51:48.000Z</published>
    <updated>2018-12-18T18:43:56.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="烧录软件安装"><a href="#烧录软件安装" class="headerlink" title="烧录软件安装"></a>烧录软件安装</h2><h3 id="EasyOpenJTAG介绍及安装程序"><a href="#EasyOpenJTAG介绍及安装程序" class="headerlink" title="EasyOpenJTAG介绍及安装程序"></a>EasyOpenJTAG介绍及安装程序</h3><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h4><a id="more"></a><p>该部分为win 8,10 系统需要设置，非win 8,10 系统略过。 </p><p>由于 Windows10 的安全机制，安装 EasyOpenJTAG 更麻烦一点： 需要更改 Windows 的<br>启动模式， 禁用“驱动程序签名强制”功能。</p><p>详细教程：<a href="https://jingyan.baidu.com/article/375c8e19c2b25b25f2a229a3.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/375c8e19c2b25b25f2a229a3.html</a></p><p>点击桌面右下角的通知图标，选择“所有设置”，如图 4.11 所示。然后选择“更新和安全”，如图 4.12 所示。 </p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_17-50-55.png" alt="Snipaste_2018-12-17_17-50-55"></p><p>(1) 选择左边选项栏中的“恢复”，选择高级启动的“立即重启”，然后选择“更新和安全”，如图 4.13 所示。然后选择“疑难解答”，如图 4.14 所示。 </p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_17-52-03.png" alt="Snipaste_2018-12-17_17-52-03"></p><p>(2) 接着在“高级选项”里选择“启动设置”，如图 4.15 所示。在“启动设置”里面选择重启，如图 4.16 所示。 </p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_17-47-16.png" alt="Snipaste_2018-12-17_17-47-16">(3) 此时电脑会重启，重启之后不会直接进入系统界面，而是进入图 4.17 所示的“启<br>动设置“界面，按下键盘的” F7“，禁用驱动程序强制签名。 </p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_17-52-59.png" alt="Snipaste_2018-12-17_17-52-59"></p><p>如下步骤是正常的驱动安装流程，非 win 8,10 系统(比如 winxp,win7 系统)直接从这里开始。 </p><h4 id="2-开始安装-EasyOpenJTAG驱动"><a href="#2-开始安装-EasyOpenJTAG驱动" class="headerlink" title="2.开始安装 EasyOpenJTAG驱动"></a>2.开始安装 EasyOpenJTAG驱动</h4><p>(1) 将 EasyOpenJTAG 插入电脑 USB 口。打开“设备管理器”。在设备管理器可以看到两个感叹号图标的设备，这表示 EasyOpenJTAG 未安装驱动。 选中第一个带感叹号的设备，右键鼠标，在弹出的菜单中选择“更新驱动程序”，如图 所示</p><p> <img src="D:\MyBlog\图片\Snipaste_2018-12-17_18-07-57.png" alt="Snipaste_2018-12-17_18-07-57"></p><p>(2) 选择“浏览我的计算机以查找驱动程序软件”再选择驱动程序的路径，点击“下一步”，如图 4.21 所示。在弹出的 Windows 安全警告窗口里，选择“始终安装此驱动程序软件”，如图 4.22 所示 </p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_15-50-26.png" alt="Snipaste_2018-12-18_15-50-26"></p><p>（4）之后看到如图 4.23 所示的安装成功提示信息。同样的方法，点击第二个带感叹号的<br>设备。 这样一共重复三次即可更新完所有驱动，驱动安装好后设备管理器显示:一个“ US B<br>Serial Port” ,一个“100ASK JTAG”，一个“100ASK Serial Port”，如图 4.24 所示。 </p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_15-52-39.png" alt="Snipaste_2018-12-18_15-52-39"></p><p>（安装完成）</p><h4 id="3-安装-EasyOpenJTAG应用程序-（oflash）"><a href="#3-安装-EasyOpenJTAG应用程序-（oflash）" class="headerlink" title="3.安装 EasyOpenJTAG应用程序 （oflash）"></a>3.安装 EasyOpenJTAG应用程序 （oflash）</h4><p> （1） 双击“01.OpenOCD with GUI setup.exe “一路OK，就完成。【略】</p><p>（2）测试是否安装成功。 </p><p>打开 Windows 命令窗口，如图 4.9 所示。 在窗口输入“oflash”命令即可启动 oflash，如图 4.10 所示即表示安装成功 </p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_16-05-24.png" alt="Snipaste_2018-12-18_16-05-24"></p><h4 id="4-失败解决方法"><a href="#4-失败解决方法" class="headerlink" title="4.失败解决方法"></a>4.失败解决方法</h4><p>无法找到某环境，配置环境变量。</p><p>找到OpenJTAG的bin 目录，将其按照下面加入环境变量。</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_16-21-55.png" alt="Snipaste_2018-12-18_16-21-55"></p><h3 id="EasyOpenJTAG烧录程序"><a href="#EasyOpenJTAG烧录程序" class="headerlink" title="EasyOpenJTAG烧录程序"></a>EasyOpenJTAG烧录程序</h3><ul><li>用于烧录.bin文件（uboot.bin，裸板程序），只能烧小文件，速度极慢。 </li><li>uboot文件可以烧录到–&gt;Nor,Nand。裸板文件只能烧录到–&gt;Nand。</li></ul><h4 id="烧录leds-bin文件"><a href="#烧录leds-bin文件" class="headerlink" title="烧录leds.bin文件"></a>烧录leds.bin文件</h4><ul><li><p>选择启动方式：Nand启动</p></li><li><p>选择要烧录的.bin 文件路径。</p><p>（D:\韦东山\1_ARM裸机1期加强版(新1期)\源码文档图片\源码\源码<em>20180321</em>添加传感器\001_led_on_008_003）</p></li><li><p>开始oflash烧录</p></li></ul><ol><li>打开cmdwindows+R：选择烧录文件盘符：D</li><li>cd 到烧录目录：cd:D:\韦东山\1_ARM裸机1期加强版(新1期)\源码文档图片\源码\源码<em>20180321</em>添加传感器\001_led_on_008_003</li><li>启动oflash并选择烧录.bin文件：oflash led_on.bin</li><li>选择烧录工具：enter the number：0</li><li>选择烧录芯片：enter the number：1</li><li>选择烧录地址：select the function to test：0（裸机文件只能从Nand启动）</li><li>再次确认烧录地址：select the function to test：0</li><li>烧录到第0块：input target block number：0</li></ol><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_17-15-08.png" alt="Snipaste_2018-12-18_17-15-08"></p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_17-21-51.png" alt="Snipaste_2018-12-18_17-21-51"></p><p>烧录成功ok.</p><p>拔掉OpenJTGA,重启开发板，观察led。</p><p>使用usbshaolu</p><h2 id="如何烧录系统"><a href="#如何烧录系统" class="headerlink" title="如何烧录系统"></a>如何烧录系统</h2><p>我们知道使用OpenJTGA烧录一个Uboot文件用了几分钟，烧写速度非常的慢。在实际开发中经常要修改编译，那有没有更快的烧写方法呢。因此引入使用Uboot通过usb烧写bin 文件。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="Windows和linux系统启动比较"><a href="#Windows和linux系统启动比较" class="headerlink" title="Windows和linux系统启动比较"></a>Windows和linux系统启动比较</h4><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_18-55-36.png" alt="Snipaste_2018-12-18_18-55-36"></p><p>图1-1</p><h4 id="jz2440v3的flash介绍"><a href="#jz2440v3的flash介绍" class="headerlink" title="jz2440v3的flash介绍"></a>jz2440v3的flash介绍</h4><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_18-58-23.png" alt="Snipaste_2018-12-18_18-58-23"></p><p>图1-2</p><p>　Bootloader 即引导加载程序，是系统加电后运行的第一段<a href="https://www.baidu.com/s?wd=%E8%BD%AF%E4%BB%B6%E4%BB%A3%E7%A0%81&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">软件代码</a>。简单的说u-boot是bootloader，它们所完成的任务也大同小异。</p><p>uboot可以烧录在Nor，Nand 上，一般u-boot烧录在Nor，用于系统启动引导。</p><p>Nand比较大，内核及文件系统存在于Nand Flash</p><h4 id="jz2440烧录框架"><a href="#jz2440烧录框架" class="headerlink" title="jz2440烧录框架"></a>jz2440烧录框架</h4><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_18-45-45.png" alt="Snipaste_2018-12-18_18-45-45"></p><ol><li>将启动设置在Nor启动</li><li>将u-boot烧录在到Nor Flsh上</li><li>开机，Nor启动，uboot启动</li><li>使用uboot的usb下载功能，使用pc传文件给开发板（kernel及rootfs）</li><li>uboot收到文件后再烧录到flash</li></ol><h4 id="如何烧录系统-1"><a href="#如何烧录系统-1" class="headerlink" title="如何烧录系统"></a>如何烧录系统</h4><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_18-59-59.png" alt="Snipaste_2018-12-18_18-59-59"></p><p>图1-3</p><ol><li>通过op、eop烧录U-boot到Nor</li><li>通过usb烧录Kernel和文件系统。</li></ol><h2 id="开始烧录系统"><a href="#开始烧录系统" class="headerlink" title="开始烧录系统"></a>开始烧录系统</h2><h3 id="设置启动方式"><a href="#设置启动方式" class="headerlink" title="设置启动方式"></a>设置启动方式</h3><p>将启动设置在Nor启动</p><h3 id="将u-boot烧录在到Nor-Flsh上"><a href="#将u-boot烧录在到Nor-Flsh上" class="headerlink" title="将u-boot烧录在到Nor Flsh上"></a>将u-boot烧录在到Nor Flsh上</h3><p>参考：上面<strong>EasyOpenJTAG烧录程序</strong></p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_18-12-07.png" alt="Snipaste_2018-12-18_18-12-07"></p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_18-13-24.png" alt="Snipaste_2018-12-18_18-13-24"></p><p>## </p><h3 id="开机，Nor启动，uboot启动"><a href="#开机，Nor启动，uboot启动" class="headerlink" title="开机，Nor启动，uboot启动"></a>开机，Nor启动，uboot启动</h3><p>拔掉OpenJTAG,设置Nor启动，连接usb及com到pc，使用MobaXterm打开串口，重新启动。</p><p>让开发板运行于 UBOOT，不要让它启动进入内核（在 UBOOT 启动时在串口<br>工具里按下空格【计数三秒内】，阻止它启动 Linux ）</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_20-43-46.png" alt="Snipaste_2018-12-18_20-43-46"></p><h3 id="usb传文件给开发板（kernel及rootfs）"><a href="#usb传文件给开发板（kernel及rootfs）" class="headerlink" title="usb传文件给开发板（kernel及rootfs）"></a>usb传文件给开发板（kernel及rootfs）</h3><h4 id="烧录内核"><a href="#烧录内核" class="headerlink" title="烧录内核"></a>烧录内核</h4><p>MobaXterm命令内输入：k</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_20-49-09.png" alt="Snipaste_2018-12-18_20-49-09"></p><p>打开DNW,选择烧录内核</p><p>（usb驱动和DNW安装在下面）</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_21-08-49.png" alt="Snipaste_2018-12-18_21-08-49"></p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_21-12-14.png" alt="Snipaste_2018-12-18_21-12-14"></p><h4 id="烧录文件系统"><a href="#烧录文件系统" class="headerlink" title="烧录文件系统"></a>烧录文件系统</h4><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_21-10-13.png" alt="Snipaste_2018-12-18_21-10-13"></p><h4 id="擦除分区"><a href="#擦除分区" class="headerlink" title="擦除分区"></a>擦除分区</h4><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_21-17-25.png" alt="Snipaste_2018-12-18_21-17-25"></p><h4 id="完成重启并校准"><a href="#完成重启并校准" class="headerlink" title="完成重启并校准"></a>完成重启并校准</h4><p>启动，重启要求校准，校准失败执行下面命令。会再次校准。</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_21-19-50.png" alt="Snipaste_2018-12-18_21-19-50"></p><h3 id="补充：usb驱动和DNW安装"><a href="#补充：usb驱动和DNW安装" class="headerlink" title="补充：usb驱动和DNW安装"></a>补充：usb驱动和DNW安装</h3><p>注意：一定要完成下面连点：</p><ol><li>连接usb线及com线到pc</li><li>使用MobaXterm打开串口，重新启动，让开发板运行于 UBOOT（在开发板启动时在串口<br>工具里按下空格【计数三秒内】，阻止它启动 Linux ）</li></ol><p>3.运行 zadig-2.3.exe，可以看到如下图 4.25 界面： </p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_21-34-47.png" alt="Snipaste_2018-12-18_21-34-47"></p><p>注意，如果上图位置 1 处的下拉框中没有“SEC S3C2410X Text B/D”，可以点击菜单<br>“Options”，选中“List All Device”；再重接 USB线 。</p><p>4.安装好驱动程序， 设备管理器如图 </p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_21-37-32.png" alt="Snipaste_2018-12-18_21-37-32"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;烧录软件安装&quot;&gt;&lt;a href=&quot;#烧录软件安装&quot; class=&quot;headerlink&quot; title=&quot;烧录软件安装&quot;&gt;&lt;/a&gt;烧录软件安装&lt;/h2&gt;&lt;h3 id=&quot;EasyOpenJTAG介绍及安装程序&quot;&gt;&lt;a href=&quot;#EasyOpenJTAG介绍及安装程序&quot; class=&quot;headerlink&quot; title=&quot;EasyOpenJTAG介绍及安装程序&quot;&gt;&lt;/a&gt;EasyOpenJTAG介绍及安装程序&lt;/h3&gt;&lt;h4 id=&quot;1-准备工作&quot;&gt;&lt;a href=&quot;#1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1.准备工作&quot;&gt;&lt;/a&gt;1.准备工作&lt;/h4&gt;
    
    </summary>
    
      <category term="S3C244入门" scheme="https://github.com/SetCalm/setcalm.github.io/categories/S3C244%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="S3C244" scheme="https://github.com/SetCalm/setcalm.github.io/tags/S3C244/"/>
    
  </entry>
  
  <entry>
    <title>LS4-1.1LED实现</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/LS4-1.1LED%E5%AE%9E%E7%8E%B0.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/LS4-1.1LED实现.html</id>
    <published>2018-12-15T14:32:25.000Z</published>
    <updated>2018-12-18T18:43:47.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="S3C2440框架"><a href="#S3C2440框架" class="headerlink" title="S3C2440框架"></a>S3C2440框架</h2><a id="more"></a><p><img src="D:\MyBlog\图片\Snipaste_2018-12-15_23-40-16.png" alt="Snipaste_2018-12-15_23-40-16"></p><p>Cpu：</p><p>SRAM：SOC内部集成有4K的SRAM片内内存</p><p>GPIO控制器：gpio（General Purpose：通用输入输出接口）</p><p>Nand控制器：外接256M的NandFlash</p><p>NorFlash：NorFlash直接接在Mcu上面（2M）</p><h2 id="S3C2440是如何启动"><a href="#S3C2440是如何启动" class="headerlink" title="S3C2440是如何启动"></a>S3C2440是如何启动</h2><h3 id="NOR启动"><a href="#NOR启动" class="headerlink" title="NOR启动"></a>NOR启动</h3><p>（NorFlash基本地址为0，此时片内SRAM 地址为0X4000 0000）</p><ol><li>程序（bin）烧录在NorFlash</li><li>Cpu从Nor上第一个地址开始（0）读出第一个指令（四字节）执行</li><li>Cpu连接读出其他指令执行</li></ol><p>(即：Nor启动：开机后Cpu从Nor上第一个地址 （0）字节开始连续读出指令并执行)</p><h3 id="Nand启动"><a href="#Nand启动" class="headerlink" title="Nand启动"></a>Nand启动</h3><p>（使用片内4KRAM，基地址为0，此时NorFlash不可可用）</p><ul><li>程序（bin）烧录在NandFlash</li><li>2440硬件首先把Nand前4K的内容复制到片内SRAM内</li><li>然后Cpu从 SRAM的0地址取出第一条指令并执行。</li></ul><p>(即：Nor启动：开机后硬件将Nand前4K的内容复制到片内SRAM，然后Cpu开始SRAM连续读出指令并执行)</p><h2 id="如何通过S3C2440控制led"><a href="#如何通过S3C2440控制led" class="headerlink" title="如何通过S3C2440控制led"></a>如何通过S3C2440控制led</h2><h3 id="GPIO管脚直接控制led"><a href="#GPIO管脚直接控制led" class="headerlink" title="GPIO管脚直接控制led"></a>GPIO管脚直接控制led</h3><p><img src="D:\MyBlog\图片\Snipaste_2018-12-15_23-04-50.png" alt="Snipaste_2018-12-15_23-04-50"></p><p>R作用：根据I=U/R,而led电阻很小，如果不接R通过led的电流I会很大，从而烧掉led。这里R具有限流作用，保护led。</p><p>该电路缺点：有些主芯片可能只能输出1.5V或更低电压 或者该芯片只能输出很弱的电流。此时引脚的驱动能力就会不足。</p><p>此时需要改变电路是用三极管驱动，外部供电来实现更大的驱动能力，如下</p><h3 id="三极管驱动led"><a href="#三极管驱动led" class="headerlink" title="三极管驱动led"></a>三极管驱动led</h3><p><img src="D:\MyBlog\图片\Snipaste_2018-12-15_23-06-06.png" alt="Snipaste_2018-12-15_23-06-06"></p><p>总结：主芯片引脚通过输出高电平、低电平改变led状态。</p><p>我们不关心GPIO输出的电压值，统一使用高电平和低电平称呼。简称：1/0</p><p>逻辑”1“  ：高电平</p><p>逻辑”0“  ：低电平</p><h2 id="JZ2440实现led控制"><a href="#JZ2440实现led控制" class="headerlink" title="JZ2440实现led控制"></a>JZ2440实现led控制</h2><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="D:\MyBlog\图片\Snipaste_2018-12-16_00-13-38.png" alt="Snipaste_2018-12-16_00-13-38"></p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-16_00-14-21.png" alt="Snipaste_2018-12-16_00-14-21"></p><h3 id="硬件分析"><a href="#硬件分析" class="headerlink" title="硬件分析"></a>硬件分析</h3><p>从原理图可以看出：当GPF4输出低电平时D10亮， 当GPF4输出高电平时D10灭。</p><p>那么如何控制GPF4输出高低电平呢。</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-16_01-09-11.png" alt="Snipaste_2018-12-16_01-09-11"></p><h3 id="软件控制led原理"><a href="#软件控制led原理" class="headerlink" title="软件控制led原理"></a>软件控制led原理</h3><h4 id="GPIO配置寄存器"><a href="#GPIO配置寄存器" class="headerlink" title="GPIO配置寄存器"></a>GPIO配置寄存器</h4><p><img src="D:\MyBlog\图片\Snipaste_2018-12-16_01-16-12.png" alt="Snipaste_2018-12-16_01-16-12"></p><h5 id="1-输入-输出状态配置"><a href="#1-输入-输出状态配置" class="headerlink" title="1.输入/输出状态配置"></a>1.输入/输出状态配置</h5><p><img src="D:\MyBlog\图片\Snipaste_2018-12-16_01-22-12.png" alt="Snipaste_2018-12-16_01-22-12"></p><p><strong>配置GPF4为输出状态</strong></p><p>即把0x100写入GPFCON[地址：0x6000050内]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPFCONF[<span class="number">9</span>:<span class="number">8</span>]=<span class="number">0b01</span> ;<span class="comment">//设置GPF4引脚为输出状态，0b表示二进制</span></span><br></pre></td></tr></table></figure><h5 id="2-输入-输出电平设置"><a href="#2-输入-输出电平设置" class="headerlink" title="2.输入/输出电平设置"></a>2.输入/输出电平设置</h5><p><img src="D:\MyBlog\图片\Snipaste_2018-12-16_01-29-52.png" alt="Snipaste_2018-12-16_01-29-52"></p><p><strong>配置GPF4输出高/低电平</strong></p><p>输出高电平，led熄灭：即把0x10写入GPFDAT[地址：0x6000054内]</p><p>输出高低平，led熄灭：即把0写入GPFDAT[地址：0x6000054内]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`GPFDAT[<span class="number">4</span>]=<span class="number">1</span> ;<span class="comment">//设置GPF4输出高电平，灯灭</span></span><br><span class="line">`GPFDAT[<span class="number">4</span>]=<span class="number">0</span> ;<span class="comment">//设置GPF4输出低电平，灯亮</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>配置GPF4为输出状态</strong></p><p>即把0x100写入GPFCON[地址：0x6000050内]</p><p><strong>配置GPF4输出高/低电平</strong></p><p>输出高电平，led熄灭：即把0x10写入GPFDAT[地址：0x6000054内]</p><p>输出高低平，led熄灭：即把0写入GPFDAT[地址：0x6000054内]</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="汇编实现"><a href="#汇编实现" class="headerlink" title="汇编实现"></a>汇编实现</h3><h4 id="几条实用汇编代码"><a href="#几条实用汇编代码" class="headerlink" title="几条实用汇编代码"></a>几条实用汇编代码</h4><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_23-22-51.png" alt="Snipaste_2018-12-18_23-22-51"></p><p>为甚麽引入伪指令：</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-18_23-31-14.png" alt="Snipaste_2018-12-18_23-31-14"></p><p>MOV R0, #0X12345678 //该指令为64位指令，而ARM指令为32位，剩下的无法保存。所以引入伪指令。</p><h4 id="开始汇编点亮led"><a href="#开始汇编点亮led" class="headerlink" title="开始汇编点亮led"></a>开始汇编点亮led</h4><p>编译led_on.S文件： arm-linux-gcc -o led_on led_on.s</p><h3 id="C语言实现"><a href="#C语言实现" class="headerlink" title="C语言实现"></a>C语言实现</h3><h2 id="安装交叉编译工具"><a href="#安装交叉编译工具" class="headerlink" title="安装交叉编译工具"></a>安装交叉编译工具</h2><p>教程：<a href="https://blog.csdn.net/dearwind153/article/details/39017131" target="_blank" rel="noopener">https://blog.csdn.net/dearwind153/article/details/39017131</a></p><p>网上下载 arm-linux-gcc-4.4.3.tar.gz</p><p><a href="http://pan.baidu.com/s/1bpEq2Mr" target="_blank" rel="noopener">arm-linux-gcc-4.4.3.tar.gz</a> （百度云盘，密码：1gtt）</p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>1、解压交叉编译开发工具包</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> sudo tar xvzf arm-linux-gcc<span class="number">-4.4</span><span class="number">.3</span>.tar.gz -C /</span><br><span class="line"><span class="comment">//解压工具链到根目录，这里的解压目录可以任意指定。系统中会增加目录/opt/FriendlyARM/toolschain/4.4.3/</span></span><br></pre></td></tr></table></figure><p>2、修改环境变量，把交叉编译器的路径加入到PATH</p><p>  采用修改/etc/bash.bashrc文件的方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//①用vim打开文件：</span></span><br><span class="line">  <span class="meta">#sudo vim /etc/bash.bashrc</span></span><br><span class="line"><span class="comment">//②在最后面新建一行加上:</span></span><br><span class="line">  <span class="keyword">export</span>  PATH=$PATH:/opt/FriendlyARM/toolschain/<span class="number">4.4</span><span class="number">.3</span>/bin</span><br></pre></td></tr></table></figure><hr><p>3、立即使新的环境变量生效，不用重启电脑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="meta">#source /etc/bash.bashrc</span></span><br></pre></td></tr></table></figure><p>4、检查是否将路径加入到PATH</p><pre><code>#echo $PATH若显示的内容中有刚刚添加的交叉编译器所在目录，则证明编译环境安装成功。</code></pre><p><img src="D:\MyBlog\图片\Snipaste_2018-12-19_02-24-41.png" alt="Snipaste_2018-12-19_02-24-41"></p><p>5、测试是否安装成功</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#arm-linux-gcc -v</span></span><br></pre></td></tr></table></figure><p>上面的指令会显示arm-linux-gcc信息和版本，显示的内容信息：</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-19_02-25-28.png" alt="Snipaste_2018-12-19_02-25-28"></p><p>此时，证明安装成功。</p><p>6，编译实验</p><p>写个HelloWorld程序，测试交叉工具连</p><p>新建一个hello.c文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行下面的指令：</p><p>   #arm-linux-gcc -o hello hello.c</p><p><strong>要是不报错说明安装成功。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;S3C2440框架&quot;&gt;&lt;a href=&quot;#S3C2440框架&quot; class=&quot;headerlink&quot; title=&quot;S3C2440框架&quot;&gt;&lt;/a&gt;S3C2440框架&lt;/h2&gt;
    
    </summary>
    
      <category term="S3C244裸机开发" scheme="https://github.com/SetCalm/setcalm.github.io/categories/S3C244%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="S3C244" scheme="https://github.com/SetCalm/setcalm.github.io/tags/S3C244/"/>
    
  </entry>
  
  <entry>
    <title>LS2_JZ2440V3开发之开发板硬件连接及驱动安装</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/LS3-JZ2440V3%E5%BC%80%E5%8F%91%E4%B9%8B%E8%AE%A4%E8%AF%86%E5%BC%80%E5%8F%91%E6%9D%BF%E5%8F%8A%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/LS3-JZ2440V3开发之认识开发板及驱动安装.html</id>
    <published>2018-12-14T11:09:34.000Z</published>
    <updated>2018-12-18T18:43:33.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="熟悉开发板步骤"><a href="#熟悉开发板步骤" class="headerlink" title="熟悉开发板步骤"></a>熟悉开发板步骤</h2><h3 id="接口介绍"><a href="#接口介绍" class="headerlink" title="接口介绍"></a>接口介绍</h3><p>板载 USB 串口、 JTAG、 usb下载口(dnw) </p><a id="more"></a><p><img src="D:\MyBlog\图片\Snipaste_2018-12-14_19-24-58.png" alt="Snipaste_2018-12-14_19-24-58"></p><p>​            图 4.1 接口介绍<br>①为板载 USB串口；②为 USB下载口，又名 dnw；③是 JTAG 口。 </p><p>三接口与PC模型</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-14_19-50-53.png" alt="Snipaste_2018-12-14_19-50-53"></p><ul><li><p><strong>烧写：</strong></p><p>PC 使用eop通过JTAG烧写口实现烧写。(可靠但速度很慢，大文件使用USB 烧录)</p></li><li><p><strong>调式信息</strong></p><p>一般开发板使用串口打印实现调式。PC通过串口把命令发给开发板，而开发板通过串口把结果发给PC。</p></li><li><p><strong>USB Device</strong></p><p>烧写大文件（kernel，rootfs）使用USB设备，前提是板子运行有支持USB 下载程序的u-boot。</p></li></ul><h2 id="裸机开发步骤"><a href="#裸机开发步骤" class="headerlink" title="裸机开发步骤"></a>裸机开发步骤</h2><h3 id="不同系统下应用程序开发比较"><a href="#不同系统下应用程序开发比较" class="headerlink" title="不同系统下应用程序开发比较"></a>不同系统下应用程序开发比较</h3><p><img src="D:\MyBlog\图片\Snipaste_2018-12-14_20-43-03.png" alt="Snipaste_2018-12-14_20-43-03"></p><p><strong>Ubuntu</strong></p><p>名词解释：gcc</p><ul><li>gcc是linux系统下主要的编译软件，</li><li>gcc的全称是GNU编译器套件（GNU Compiler Collection），</li><li>除了可以编译c语言开发的程序外，还可以开发C++、Java等多个语言的程序。</li><li>GCC的初衷是为GNU操作系统专门编写的一款编译器。</li></ul><p><strong>使用gcc的原因：</strong>功能强大、稳定、开源免费。</p><p><strong>gcc版本查看：</strong>gcc  -v  </p><p><strong>ARM裸机开发</strong></p><p>交叉编译模式：<br>​    通常编译嵌入式程序的平台称为宿主机（如：PC的ubuntu系统，CPU架构为X86架构），运行嵌入式程序的平台成为目标机（如：某款ARM开发板，CPU架构为ARM架构）。在X86平台编辑和通过编译器arm-linux-gcc编译的ARM架构的程序，两者属于不同的架构平台，从而属于交叉编译模式。然后将程序烧写到ARM开发板中（下载方式有：JTAG、USB、SD卡、网络等多种方式），然后在开发板上运行该程序。</p><h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><h4 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h4><p>推荐使用windows平台的source insight和notepad。<br>source insight在查看代码、编辑代码等功能时非常好用。</p><h4 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h4><p>推荐使用arm-linux-gcc<br>arm-linux-gcc是基于linux平台的arm编译器。它是开源免费的编译器。<br>arm-linux-gcc功能强大、稳定、支持的arm芯片众多、更新速度快。</p><h4 id="入门误区：使用ads、MDK"><a href="#入门误区：使用ads、MDK" class="headerlink" title="入门误区：使用ads、MDK"></a>入门误区：使用ads、MDK</h4><p>ads（停止更新）、MDK，是windows平台的编译器，功能较弱。<br>1）只适合个人或者小团队的开发，不适合于中型、大型团队的协作开发。<br>2）是收费软件。</p><h3 id="安装source-insight"><a href="#安装source-insight" class="headerlink" title="安装source insight"></a>安装source insight</h3><p>略</p><h3 id="安装notepad"><a href="#安装notepad" class="headerlink" title="安装notepad"></a>安装notepad</h3><p>略</p><h3 id="安装free-hex-edtor"><a href="#安装free-hex-edtor" class="headerlink" title="安装free-hex-edtor"></a>安装free-hex-edtor</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;熟悉开发板步骤&quot;&gt;&lt;a href=&quot;#熟悉开发板步骤&quot; class=&quot;headerlink&quot; title=&quot;熟悉开发板步骤&quot;&gt;&lt;/a&gt;熟悉开发板步骤&lt;/h2&gt;&lt;h3 id=&quot;接口介绍&quot;&gt;&lt;a href=&quot;#接口介绍&quot; class=&quot;headerlink&quot; title=&quot;接口介绍&quot;&gt;&lt;/a&gt;接口介绍&lt;/h3&gt;&lt;p&gt;板载 USB 串口、 JTAG、 usb下载口(dnw) &lt;/p&gt;
    
    </summary>
    
      <category term="S3C244入门" scheme="https://github.com/SetCalm/setcalm.github.io/categories/S3C244%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="S3C244" scheme="https://github.com/SetCalm/setcalm.github.io/tags/S3C244/"/>
    
  </entry>
  
  <entry>
    <title>LS1_JZ2440V3开发之环境搭建</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/LS1-JZ2440V3%E5%BC%80%E5%8F%91%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/LS1-JZ2440V3开发之环境搭建.html</id>
    <published>2018-12-14T11:07:11.000Z</published>
    <updated>2018-12-18T18:43:25.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h2><p>嵌入式开发者中一般需要用的软件、工具如下：<br>✓ 虚拟机 Workstation Player                                                                            ✓ Linux系统     Ubuntu 16.04 LTS<br>✓ 远程登录/远程传输/串口三合一软件 MobaXterm<br>✓ FTP 传输工具 FileZilla<br>✓ TFTP 服务器软件 tftpd.exe</p><a id="more"></a><p>(1) 为什么要使用虚拟机?                                                                 </p><p>后续开发都是在 Windows 下编辑代码,在 Linux 下编译代码。要么安装双系统，要么使用虚拟机。我们推荐后者。</p><p>（其实更希望搭建NAS装个Ubuntu，然后在哪里都能开发，以免换电脑啥的得重新搭建环境（环境搭建很麻烦人）。年后会尝试搭建个NAS服务器，用于资料存储。）</p><p>(2) 在 Windows 操作 Linux 有两种方式：</p><p>一是切换到虚拟机 ubuntu，在虚拟机中操作ubuntu；另一种是远程登录 ubuntu，开发中更多使用后者。 在 Windows 上远程登录 ubuntu并执行各种命令时，使用 ssh 工具； 在 Windows 和 ubuntu 之间传输文件时，通常使用 FTP工具。</p><p>(3) 要观察开发板打印的调试信息时，最方便的方法是使用串口。<br>以上远程登录、 FTP 传输、串口传输都可以使用一个软件实现——MobaXterm(目录在资料光盘-》 工具和驱动\串口和远程登录工具)</p><p>(4) 虽然 MobaXterm 也有 FTP 功能， 但使用另一个 FTP 工具 FileZilla 在Windows 与 ubuntu 之间的传输文件更方便。 </p><h3 id="安装虚拟机-Workstation-Player"><a href="#安装虚拟机-Workstation-Player" class="headerlink" title="安装虚拟机 Workstation Player"></a>安装虚拟机 Workstation Player</h3><p>略（已安装过，以后更新）</p><h3 id="使用虚拟机安装-Ubuntu"><a href="#使用虚拟机安装-Ubuntu" class="headerlink" title="使用虚拟机安装 Ubuntu"></a>使用虚拟机安装 Ubuntu</h3><p>略（已安装过，以后更新）</p><h3 id="Ubuntu配置"><a href="#Ubuntu配置" class="headerlink" title="Ubuntu配置"></a>Ubuntu配置</h3><h4 id="安装完整版本的-VIM"><a href="#安装完整版本的-VIM" class="headerlink" title="安装完整版本的 VIM"></a>安装完整版本的 VIM</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><h4 id="VI的个性设置"><a href="#VI的个性设置" class="headerlink" title="VI的个性设置"></a>VI的个性设置</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：vi`~/.vimrc</span><br></pre></td></tr></table></figure><h4 id="安装-SSH"><a href="#安装-SSH" class="headerlink" title="安装 SSH"></a>安装 SSH</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ssh</span><br></pre></td></tr></table></figure><ul><li>SSH的英文全称是Secure SHell。通过使用SSH，你可以把所有传输的数据进行加密，这样”中间人”这种攻击方式就不可能实现了，而且也能够防止DNS和IP欺骗。</li><li>SSH传输的数据是经过压缩的，所以可以加快传输的速度。</li><li>SSH有很多功能，它既可以代替telnet，又可以为ftp、 pop、甚至ppp提供一个安全的”通道”。</li><li>SSH客户端与服务器端通讯时，用户名及口令均进行了加密，有效防止了对口令的窃听。</li></ul><h4 id="启用-root密码"><a href="#启用-root密码" class="headerlink" title="启用 root密码"></a>启用 root密码</h4><p>启用 root 帐号 (也就是 设置一个口令) 使用:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>如何在终端机模式下切换到 root 身份?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -s -H</span><br><span class="line">Password: &lt;在这注明您的密码&gt;</span><br></pre></td></tr></table></figure><h4 id="更新ubuntu的源"><a href="#更新ubuntu的源" class="headerlink" title="更新ubuntu的源"></a>更新ubuntu的源</h4><p>参考网站：</p><p>1.如何在/etc/apt/sources.list添加新内容：<a href="https://blog.csdn.net/qq_31811537/article/details/79310567" target="_blank" rel="noopener">https://blog.csdn.net/qq_31811537/article/details/79310567</a></p><p>2.如何在/etc/apt/sources.list添加新内容：<a href="https://blog.csdn.net/xiayaobo/article/details/46970663" target="_blank" rel="noopener">https://blog.csdn.net/xiayaobo/article/details/46970663</a></p><p>如果apt-get安装软件包的时候，速度很慢可以根据ubuntu的版本，百度里面查找更换为国内163的源</p><p><strong>编辑(更新)源命令：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.<span class="built_in">list</span></span><br></pre></td></tr></table></figure><p><strong>通知ubuntu启用新的更新源:</strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p><strong>更新软件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h4 id="ubuntu版本查询"><a href="#ubuntu版本查询" class="headerlink" title="ubuntu版本查询"></a>ubuntu版本查询</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo lsb_release -a</span><br></pre></td></tr></table></figure><h4 id="查询ubuntu是32位还是64位版本"><a href="#查询ubuntu是32位还是64位版本" class="headerlink" title="查询ubuntu是32位还是64位版本"></a>查询ubuntu是32位还是64位版本</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo uname -m</span><br><span class="line"><span class="comment">// 如果显示i686,你安装了32位操作系统</span></span><br><span class="line"><span class="comment">//如果显示 x86_64，你安装了64位操作系统</span></span><br></pre></td></tr></table></figure><h3 id="ubuntu设置静态ip"><a href="#ubuntu设置静态ip" class="headerlink" title="ubuntu设置静态ip"></a>ubuntu设置静态ip</h3><h4 id="windows设置静态ip"><a href="#windows设置静态ip" class="headerlink" title="windows设置静态ip"></a>windows设置静态ip</h4><p>win10怎么把电脑的IP地址设置成固定IP地址：<a href="https://jingyan.baidu.com/album/ac6a9a5e295f842b653eacfa.html?picindex=2" target="_blank" rel="noopener">https://jingyan.baidu.com/album/ac6a9a5e295f842b653eacfa.html?picindex=2</a></p><h4 id="Ubuntu网络设置"><a href="#Ubuntu网络设置" class="headerlink" title="Ubuntu网络设置"></a>Ubuntu网络设置</h4><h5 id="VMware中网络的设置（设置为：桥接模式）"><a href="#VMware中网络的设置（设置为：桥接模式）" class="headerlink" title="VMware中网络的设置（设置为：桥接模式）"></a>VMware中网络的设置（设置为：桥接模式）</h5><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_13-43-55.png" alt="Snipaste_2018-12-17_13-43-55"></p><h5 id="查看ip网络信息"><a href="#查看ip网络信息" class="headerlink" title="查看ip网络信息"></a>查看ip网络信息</h5><p>用ifconfig命令</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_13-49-29.png" alt="Snipaste_2018-12-17_13-49-29"></p><h5 id="修改网络配置文件"><a href="#修改网络配置文件" class="headerlink" title="修改网络配置文件"></a>修改网络配置文件</h5><ul><li>打开网络配置文件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>配置如下信息，然后保存退出</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_14-00-30.png" alt="Snipaste_2018-12-17_14-00-30"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"><span class="keyword">auto</span> eth0</span><br><span class="line">iface eth0 inet <span class="keyword">static</span></span><br><span class="line">address <span class="number">192.168</span><span class="number">.31</span><span class="number">.99</span>  <span class="comment">// //设置本机IP地址</span></span><br><span class="line">gateway <span class="number">192.168</span><span class="number">.31</span><span class="number">.1</span>  <span class="comment">//网关</span></span><br><span class="line">netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>    <span class="comment">//掩码</span></span><br></pre></td></tr></table></figure><h5 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><h5 id="检查ip是否配置成功"><a href="#检查ip是否配置成功" class="headerlink" title="检查ip是否配置成功"></a>检查ip是否配置成功</h5><p>先用ifconfig检查一下ip</p><p> 用ping命令检查本机与windows系统是否连通：ping 192.168.31.101（windows IP）</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_14-45-15.png" alt="Snipaste_2018-12-17_14-45-15"></p><h5 id="ping不通解决方法"><a href="#ping不通解决方法" class="headerlink" title="ping不通解决方法"></a>ping不通解决方法</h5><p>如果出现如下这种情况</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_14-32-40.png" alt="Snipaste_2018-12-17_14-32-40"></p><p>参考：Ubuntu虚拟机无法ping通windows，反之可以ping通解决方法：<a href="https://blog.csdn.net/qq_26822029/article/details/80428138" target="_blank" rel="noopener">https://blog.csdn.net/qq_26822029/article/details/80428138</a></p><ul><li>打开“网络和共享中心”</li></ul><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_14-51-03.png" alt="Snipaste_2018-12-17_14-51-03"></p><ul><li>选择<strong>windiws防火墙</strong>选项</li></ul><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_14-55-01.png" alt="Snipaste_2018-12-17_14-55-01"></p><ul><li>选择<strong>“高级设置”</strong></li></ul><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_14-53-43.png" alt="Snipaste_2018-12-17_14-53-43"></p><ul><li>选择“入站规则”，找到名称为“文件和打印机共享（回显请求-ICMPv4-In）”（配置文件为“专用，公用的那个”）勾上。</li></ul><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_14-57-44.png" alt="Snipaste_2018-12-17_14-57-44"></p><h5 id="配置DNS-域名解析-服务器"><a href="#配置DNS-域名解析-服务器" class="headerlink" title="配置DNS(域名解析)服务器"></a>配置DNS(域名解析)服务器</h5><p>打开DNS服务器配置文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/resolvconf/resolv.conf.d/tail</span><br></pre></td></tr></table></figure><p>写入以下信息   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver <span class="number">192.168</span><span class="number">.31</span> <span class="comment">//和windowsDNS相同</span></span><br></pre></td></tr></table></figure><p>重启本地服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/resolvconf restart</span><br></pre></td></tr></table></figure><h5 id="ping网址"><a href="#ping网址" class="headerlink" title="ping网址"></a>ping网址</h5><p>ping  <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_15-20-11.png" alt="Snipaste_2018-12-17_15-20-11"></p><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="安装-MobaXterm-（SSH，FTP，Serial）"><a href="#安装-MobaXterm-（SSH，FTP，Serial）" class="headerlink" title="安装 MobaXterm （SSH，FTP，Serial）"></a>安装 MobaXterm （SSH，FTP，Serial）</h4><p>MobaXterm 在资料光盘\工具和驱动\串口和远程登录工具目录，解压文件MobaXterm_Portable_v10.4 即可 。</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-16_22-48-43.png" alt="Snipaste_2018-12-16_22-48-43"></p><h5 id="新建-SSH连接"><a href="#新建-SSH连接" class="headerlink" title="新建 SSH连接"></a>新建 SSH连接</h5><p>打开 MobaXterm， 点击左上角的 Session（会话控制），在弹出的窗口中选择 SSH，<br>如图 </p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_15-38-50.png" alt="Snipaste_2018-12-17_15-38-50"></p><p>在新窗口中输入账号 和密码 ，回车登陆 ubuntu 。此时界面分为两块，左边的是主机的文件，右边是终端。 勾选左下角的“Follow terminal folder”可以让它们的工作路径保持一致 </p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-17_15-40-46.png" alt="Snipaste_2018-12-17_15-40-46"></p><h5 id="新建FTP连接"><a href="#新建FTP连接" class="headerlink" title="新建FTP连接"></a>新建FTP连接</h5><p>失败(略)</p><h5 id="新建串口连接"><a href="#新建串口连接" class="headerlink" title="新建串口连接"></a>新建串口连接</h5><p>点击session选择serial</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-15_22-12-48.png" alt="Snipaste_2018-12-15_22-12-48"></p><p>选择COM口（我的为COM12）及波特率和3框中的控制流为None（参考下图设置）</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-15_22-16-34.png" alt="Snipaste_2018-12-15_22-16-34"></p><p>点击OK,输入<strong>ls</strong>使用串口观察打印信息（打印信息为系统目录结构）</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-14_20-17-22.png" alt="Snipaste_2018-12-14_20-17-22"></p><h4 id="FTP传输工具-FileZill"><a href="#FTP传输工具-FileZill" class="headerlink" title="FTP传输工具 FileZill"></a>FTP传输工具 FileZill</h4><p>略</p><h4 id="TFTP服务器-tftp"><a href="#TFTP服务器-tftp" class="headerlink" title="TFTP服务器 tftp"></a>TFTP服务器 tftp</h4><p>用的软件是 tftpd.exe<br>     开发板与电脑之间用网线直接连接并使用 TFTP 下载 </p><p>略</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备知识&quot;&gt;&lt;a href=&quot;#准备知识&quot; class=&quot;headerlink&quot; title=&quot;准备知识&quot;&gt;&lt;/a&gt;准备知识&lt;/h2&gt;&lt;p&gt;嵌入式开发者中一般需要用的软件、工具如下：&lt;br&gt;✓ 虚拟机 Workstation Player                                                                            ✓ Linux系统     Ubuntu 16.04 LTS&lt;br&gt;✓ 远程登录/远程传输/串口三合一软件 MobaXterm&lt;br&gt;✓ FTP 传输工具 FileZilla&lt;br&gt;✓ TFTP 服务器软件 tftpd.exe&lt;/p&gt;
    
    </summary>
    
      <category term="S3C244入门" scheme="https://github.com/SetCalm/setcalm.github.io/categories/S3C244%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="S3C244" scheme="https://github.com/SetCalm/setcalm.github.io/tags/S3C244/"/>
    
  </entry>
  
  <entry>
    <title>LS0_嵌入式学习路线</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/LS0-%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/LS0-嵌入式学习路线.html</id>
    <published>2018-12-14T05:16:10.000Z</published>
    <updated>2018-12-18T18:43:17.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序员的三大方向"><a href="#程序员的三大方向" class="headerlink" title="程序员的三大方向"></a>程序员的三大方向</h2><ol><li>专业领域</li><li>业务领域</li><li>操作系统领域 </li></ol><h3 id="专业领域"><a href="#专业领域" class="headerlink" title="专业领域"></a>专业领域</h3><a id="more"></a><p>它又可以分为两类：学术研究和工程实现</p><h4 id="学术研究"><a href="#学术研究" class="headerlink" title="学术研究"></a>学术研究</h4><p>比如语音、图像处理、人工智能，这类工作需要你有比较强的理论知识。</p><h4 id="工程实现"><a href="#工程实现" class="headerlink" title="工程实现"></a>工程实现</h4><p>他们懂得这些专业领域的概念，但是没有深入钻研。可以使用各类开源资料实现某个目标，做出产品。比如图像处理，他懂得用 opencv 里几百个复杂函数来实现头像识别。有时候还可以根据具体芯片来优化这些函数。 </p><h3 id="业务领域"><a href="#业务领域" class="headerlink" title="业务领域"></a>业务领域</h3><p>业务领域也就是应用程序，这又可以分为下面 两类。</p><h4 id="界面显示"><a href="#界面显示" class="headerlink" title="界面显示"></a>界面显示</h4><p>即：Android APP 和 IOS APP  GUI 界面 开发。</p><ul><li>一个程序需要有 GUI 界面，但是程序的内在逻辑才是核心。 Android、 IOS 的开发工具给我们简化了 GUI 的开发，并提供了这些控件的交互机制，封装并提供了一些服务(比如网络传输)。</li><li>但是程序内部的业务逻辑、对视频图像声音的处理等等，这才是核心。另外别忘了服务器那边的后台程序：怎样更安全地保存数据、保护客户的隐私，怎样处理成千上万上百万的并发访问，等等，这也是核心 </li></ul><h4 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h4><p>​    数据结构、算法是必备，然后凭兴趣选择数据库、网络编程等等进行深入钻研， 做应用开发的人选择了某个行业，后面是很难换行业的，选行很重要 。</p><p>例如：</p><p>​    视频会议系统里，各个模块怎么对接，各类协议怎么兼容，你不深入这个行业，你根本搞不清楚。<br>应用开发的职位永远是最多的，入门门槛也低。基本上只要你会 C 语言，面试时表现比较得体，一般公司都会给你机会。因为：<br>① 你进公司后，还需要重新培训你：熟悉它们的业务逻辑。<br>② 你要做的，基本也就是一个个模块，框架都有人给你定好了，你去填代码就可以了。 </p><h3 id="操作系统领域"><a href="#操作系统领域" class="headerlink" title="操作系统领域"></a>操作系统领域</h3><ul><li>UCOS 太简单， VxWorks 太贵太专业， Windows 不玩嵌入式了， IOS 不开源，所以对于操作系统领域我们也只能玩 Linux 了。</li><li>Android 跟 QT 一样，都是一套 GUI 系统。很多时候 Linux+Android 成了标配。在学习中我们应该关心的是Android 的整个系统、里面的机制，而不是学习几个 API 然后开发界面程序。</li></ul><h4 id="操作系统领域包含的内容"><a href="#操作系统领域包含的内容" class="headerlink" title="操作系统领域包含的内容"></a>操作系统领域包含的内容</h4><p>操作系统领域所包含的内容，简单地说，就是制作出一台装好系统的专用“电脑”， 可以分为：<br>① 为产品规划硬件：按需求、性能、成本选择主芯片，搭配周边外设，交由硬件开发人员设计。<br>② 给单板制作、安装操作系统、编写驱动<br>③ 定制维护、升级等系统方案<br>④ 还可能要配置、安装 Android 等 GUI 系统：<br>⑤ 为应用开发人员配置开发环境<br>⑥ 从系统角度解决疑难问题：这个领域，通常被称为“底层系统”或是“驱动开发”。</p><h4 id="操作系统领域知识要求"><a href="#操作系统领域知识要求" class="headerlink" title="操作系统领域知识要求"></a>操作系统领域知识要求</h4><p>① 懂硬件知识才能看懂电路图<br>② 英文好会看芯片手册<br>③ 有编写、移植驱动程序的能力                                                                     ④ 对操作系统本身有一定的理解，才能解决各类疑难问题<br>⑤ 理解 Android 内部机制<br>⑥ 懂汇编、 C 语言、 C++、 JAVA </p><h4 id="操作系统领域是一个大坑"><a href="#操作系统领域是一个大坑" class="headerlink" title="操作系统领域是一个大坑"></a>操作系统领域是一个大坑</h4><p>① 这行的入门，绝对需要半年以上，即使全天学习也要半年。<br>② 它的职位，绝对比 APP 的职位少<br>③ 并且你没有 1、 2 年经验，招你到公司后一开始你做的还是 APP。 </p><h4 id="操作系统领域优点"><a href="#操作系统领域优点" class="headerlink" title="操作系统领域优点"></a>操作系统领域优点</h4><p>① 学好后，行业通杀，想换行就换行；想自己做产品就自己做产品。<br>② 相比做应用程序的人，不会被经常变动的需求搞得天天加班。<br>③ 门槛高，当然薪水相对就高。 </p><h4 id="操作系统领域适合人员人"><a href="#操作系统领域适合人员人" class="headerlink" title="操作系统领域适合人员人"></a>操作系统领域适合人员人</h4><p>① 硬件工程师想转软件工程师，从底层软件入门会比较好<br>② 单片机工程师，想升级一下。会 Linux 底层的人肯定会单片机，会单片机的人不一定<br>会 Linux。<br>③ 时间充足的学生：如果你正读大二大三，那么花上半年学习嵌入式 Linux 底层多有益<br>处。<br>④ 想掌握整个系统的人，比如你正在公司里写 APP，但是想升为系统工程师，那么底层<br>不得不学。<br>⑤ 想自己创业做实体产品的工程师，你有钱的话什么技术都不用学，但是如果没钱又想<br>做产品，那么 Linux 底层不得不学。<br>⑥ 做 Linux APP 的人，没错，他们也要学习。 </p><h3 id="应用程序与操作系统关系"><a href="#应用程序与操作系统关系" class="headerlink" title="应用程序与操作系统关系"></a>应用程序与操作系统关系</h3><p>① 开发实体产品时，应用程序写得好的人，有时候需要操作系统的知识。比如调度优先级的设置、知道某些函数可能会令进程休眠。</p><p>② 写应用程序的人进阶为系统工程师时，需要从上到下都了解，这时候就需要有操作系统领域的知识了，否则，你怎么设计整个系统的方案呢？</p><p>③ 操作系统领域负责底层系统，在上面开发什么业务跟他没关系。这行很多是技术宅，行业专家。<br>④操作系统和业务之间并没有一个界线。有操作系统经验，再去做应用，你会对系统知根知底，碰到问题时都有解决思路。</p><p>因此一个号的程序员必须学会操作系统，这有利于你更好的在产品开发中，写出更优秀的应用程序。并且在开发实体产品时，更好的从上到下了解产品开发的整个过程，有利于进阶为系统工程师对整个系统的方案设计。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从前面可以看出：在嵌入式开发区中操作系统是很重要的一部分，而GUI方面由于Google 的实力太强了，现在Android 无处不在，所以很多时候 Linux+Android 成了嵌入式开发的标配 。在以后学习中，就把操作系统默认为 Linux，讲讲怎么学习嵌入式 Linux+Android 系统。</p><p>注：Google好像在开发新手机系统：<strong>Fuchsia</strong></p><h2 id="怎么学习嵌入式-Linux-操作系统"><a href="#怎么学习嵌入式-Linux-操作系统" class="headerlink" title="怎么学习嵌入式 Linux 操作系统"></a>怎么学习嵌入式 Linux 操作系统</h2><p>① 操作系统具有进程管理、存储管理、文件管理和设备管理等功能，这些核心功能非常稳定可靠，基本上不需要我们修改代码。我们只需要针对自己的硬件完善驱动程序</p><p>② 学习驱动时必定会涉及其他知识，比如存储管理、进程调度。当你深入理解了驱动程序后，也会加深对操作系统其他部分的理解</p><p>③ Linux 内核中大部分代码都是设备驱动程序，可以认为 Linux 内核由各类驱动构成但是， 要成为该领域的高手，一定要深入理解 Linux 操作系统本身，要去研读它的源代码。</p><h3 id="学习路线图"><a href="#学习路线图" class="headerlink" title="学习路线图"></a>学习路线图</h3><p><img src="D:\MyBlog\图片\Snipaste_2018-12-14_14-38-08.png" alt="Snipaste_2018-12-14_14-38-08"></p><p>在这里将嵌入式学习分为入门，中级，高级。后期会还会加入深入：关于专业，领域类知识以及实际项目类内容。</p><h4 id="学习路线-入门"><a href="#学习路线-入门" class="headerlink" title="学习路线-入门"></a>学习路线-入门</h4><p><img src="D:\MyBlog\图片\Snipaste_2018-12-14_14-45-25.png" alt="Snipaste_2018-12-14_14-45-25"></p><p><strong>C语言</strong></p><ul><li>会C语言基本语法：会编写“ Hello, world!” ， </li><li>会指针操作，结构体及会写冒泡排序</li><li>需要掌握链表操作。 </li><li>不需要去学习任何的函数使用，比如文件操作、 多线程编程、网络编程等等； 这些知识，会在编写 Linux 应用程序时学习，在操作系统特别是驱动学习时用不着。</li></ul><p><strong>PC Linux 基本操作：</strong>   </p><ul><li>PC Linux，使用 Ubuntu 。</li><li>通常工作模式是这样：在 Windows 下阅读、编写代码， 然后把代码上传到 PC Linux去编译。 </li><li>通常使用命令行来操作 Ubuntu。因此需要掌握一些常用命令。</li></ul><p>①cd 目录名 // 进入某个目录 </p><p>② pwd : Print Work Directory（打印当前目录 显示出当前工作目录的绝对路径）</p><p>③ mkdir : Make Directory（创建目录） </p><p>④ rm : Remove（删除目录或文件） </p><p>⑤ ls : List（列出目录内容）</p><p>⑥ mount : 挂载 </p><p>⑦ chown : Change owner（改变文件的属主，即拥有者） </p><p>⑧ chmod : Change mode（改变权限）  </p><p>⑨ vi : </p><p><strong>硬件知识</strong> </p><p>① 学习《微机原理》 ,《模拟电路》 ：理解一个计算机的组成及各个部件的交互原理 ，理解各种门电路的原理及使用， 还可以掌握一些逻辑运算（ 与、 或等） 。 </p><p>②学会看原理图芯片手册，及各种协议（usart，spi，i2c）。</p><p>总结：该阶段并未开始实际的嵌入式学习，属于 准备阶段。只有当上面这些内容了解后才能够算入门，才能进入真正的嵌入式开发。后面的所有开发均是在前面熟悉下才能进行。</p><h4 id="学习路线-中级"><a href="#学习路线-中级" class="headerlink" title="学习路线-中级"></a>学习路线-中级</h4><p><img src="D:\MyBlog\图片\Snipaste_2018-12-14_14-45-46.png" alt="Snipaste_2018-12-14_14-45-46"></p><p>驱动程序=Linux 驱动程序软件框架+ARM 开发板硬件操作，我们可以从简单的裸机开发入手， 先掌握硬件操作，并且还可以：<br>① 掌握如何在 PC Linux 下编译程序、把程序烧录到板子上并运行它<br>② 为学习 bootloader 打基础： 掌握了各种硬件操作后，后面一组合就是一个 bootloader </p><p><strong>裸板程序开发</strong></p><p>学习裸板程序开发的目的有两个：<br>① 掌握裸机程序的结构， 为后续的 u-boot 作准备<br>② 练习硬件知识，即：怎么看原理图、芯片手册，怎么写代码来操作硬件 </p><p>注：后面的 u-boot 可以认为是裸机程序的集合，我们在裸机开发中逐个掌握各个部件，再集合<br>起来就可以得到一个 u-boot 了。 后续的驱动开发， 也涉及硬件操作，你可以在裸机开发中<br>学习硬件知识 </p><p><strong>bootloader 的学习</strong></p><ul><li>bootloader 有很多种， vivi、 u-boot 等等，最常用的是 u-boot </li><li>u-boot 功能强大、 源码比较多 。</li><li>u-boot 的主要功能就是：启动内核。 它涉及：读取内核到内存、设置启动参数、启动内核。 按照这个主线，我们尝试自己从零编写一个 bootloader ，让我们快速理解 u-boot 主要功能的实现 </li></ul><h4 id="学习路线-高级"><a href="#学习路线-高级" class="headerlink" title="学习路线-高级"></a>学习路线-高级</h4><p><strong>Linux 内核的学习</strong></p><p>​    内核本身不是我们学习的重点，但是了解一下内核的启动过程， 还是很有必要的：工作中有可能要修改内核以适配硬件， 掌握了启动过程才知道去配置，编译，修改及移植哪些内核文件。 </p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-14_14-47-09.png" alt="Snipaste_2018-12-14_14-47-09"></p><p><strong>根文件系统</strong></p><ul><li>在驱动程序开发阶段，我们喜欢搭建一个最小根文件系统来调试驱动；</li><li>在开发应用程序时， 也需要搭建文件系统，把各种库、配置文件放进去；</li><li>在发布产品时，你还需要修改配置文件，使得产品可以自动运行程序；</li><li>甚至你想实现插上 U 盘后自动启动某个程序，这也要要修改配置文件；</li></ul><p>这一切，都需要你理解根文件系统的构成，理解内核启动后是根据什么配置文件来启动哪些<br>应用程序。 </p><p><strong>驱动程序的学习</strong> </p><p>掌握开发过程中碰到的机制： 查询、休眠-唤醒、中断、异步通知、 poll、 同步、互斥等等。后更复杂的驱动程序，就是在这些机制的基础上， 根据硬件特性设计出精巧的软件框架。 </p><p><strong>Linux 应用程序的学习</strong><br>① 编译方法不同：<br>嵌入式 Linux 应用程序，我们需要“ 交叉编译” ： 程序要在 PC Linux 上编译，但是运行时要放到单板上。 并且， 它的编译环境需要你自己搭建：解压出工具链后设计 PATH， 还要自己构造一套 Makefile 系统。<br>② 调试方法不同 </p><p>对于嵌入式 Linux 应用程序，你可以更喜欢用打印；或是在PC Linux 上通过 GDB 观察应用程序在单板上的运行状况。 </p><p>③ 可用的资源不同： </p><p>对于嵌入式 Linux 应用程序， 很多时候需要去寻找、下载、 编译、使用开源库。 </p><p>④ 功能不同 </p><p>嵌入式 Linux 应用程序一般都要操作若干种硬件，比如监控设备中要操作摄像头、存储音视频，无人机中要操作 GPS、 螺旋桨， POS 机中要操作银行卡等等。它跟单板上的硬件联系很大， 很多时候需要你懂点硬件知识，至少是知道怎么通过驱动程序来操作这些硬件。 </p><p>因此在Linux下应用程序和window应用程序差别很大，且针对性不同，Linux一般为硬件操作。对于Linux开发应用程序，那么一定要有算法、数据结构、网络编程等基础，然后再掌握一些设计模式， </p><p>后续我们还需要学习Android系统开发。只用当Linux+Android一起才能开发出完美的实际产嵌入式品</p><h4 id="学习路线-深入"><a href="#学习路线-深入" class="headerlink" title="学习路线-深入"></a>学习路线-深入</h4><p>略</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>本次中不会去专门写<strong>学习路线-入门内容</strong>，后续会补充。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;程序员的三大方向&quot;&gt;&lt;a href=&quot;#程序员的三大方向&quot; class=&quot;headerlink&quot; title=&quot;程序员的三大方向&quot;&gt;&lt;/a&gt;程序员的三大方向&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;专业领域&lt;/li&gt;
&lt;li&gt;业务领域&lt;/li&gt;
&lt;li&gt;操作系统领域 &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;专业领域&quot;&gt;&lt;a href=&quot;#专业领域&quot; class=&quot;headerlink&quot; title=&quot;专业领域&quot;&gt;&lt;/a&gt;专业领域&lt;/h3&gt;
    
    </summary>
    
      <category term="S3C244入门" scheme="https://github.com/SetCalm/setcalm.github.io/categories/S3C244%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="S3C244" scheme="https://github.com/SetCalm/setcalm.github.io/tags/S3C244/"/>
    
  </entry>
  
  <entry>
    <title>M0-LinkitSmartMT7688-概述</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/M0-LinkitSmartMT7688-%E6%A6%82%E8%BF%B0.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/M0-LinkitSmartMT7688-概述.html</id>
    <published>2018-12-10T12:03:15.000Z</published>
    <updated>2018-12-18T18:43:11.239Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章注要介绍开发联发科LinkIt™ Smart 7688 开发平台，LinkIt Smart 7688 Duo开发平台的软件工具一开发使用文档以及LinkIt Smart 7688 Duo硬件和规格的简单介绍</p><h4 id="序"><a href="#序" class="headerlink" title="序"></a>序</h4><p>联发科技创意实验室（MediaTek Labs）推出的 LinkIt™ Smart 7688 开发平台。该联发科技 LinkIt 开发平台系列可提供多种开发环境选项来加速各种先进的Wi-Fi 无线连接设备的开发进程，比如利用云服务的 IP 摄像头、监控设备、智能电器和无线网关。</p><a id="more"></a><p>该平台现可提供两种版本的硬件开发套件（HDK）。</p><ul><li>LinkIt Smart 7688，包含一个基于 MT7688ANSOC 的微处理器单元（MPU）；</li><li>LinkIt Smart 7688 Duo，除 MPU 外，还包含一个微控制器单元（MCU），并且与 Arduino 兼容。</li><li>这两套开发板均支持内置 Wi-Fi、128MB RAM 和 32MB 闪存，以及具备连接多种多样的周边设备的能力。</li></ul><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>这一部分是有关 MediaTek LinkIt 开发平台的概述，介绍 MediaTek LinkIt Smart 7688 开发平台软件工具以及开发文档，同时也作为本文档的内容向导。 </p><h5 id="MediaTek-Linklt-介绍"><a href="#MediaTek-Linklt-介绍" class="headerlink" title="MediaTek Linklt 介绍"></a>MediaTek Linklt 介绍</h5><p>MediaTek LinkIt 是为可穿戴和物联网（IoT）设备原型化而设计的一系列开发平台，每个开发平台都提供了一系列工具、硬件和相关资源，使开发人员能够涉足各种可穿戴和物联网领域。 </p><h5 id="MidiaTek-LinkIt-Smart-7688-开发平台-介绍"><a href="#MidiaTek-LinkIt-Smart-7688-开发平台-介绍" class="headerlink" title="MidiaTek LinkIt Smart 7688 开发平台 介绍"></a>MidiaTek LinkIt Smart 7688 开发平台 介绍</h5><ul><li><p>MediaTek LinkIt Smart 7688 开发平台由一个基于 Linux Wi-Fi 芯片的开发板组成，旨在实现物联网设备的原型设计。例如应用于家庭或办公室的 Wi-Fi 安防网络摄像头和传感器，以及应用于幼儿或长者的网络监视器以及云应用。</p></li><li><p>LinkIt Smart 7688 是一款基于 OpenWrt Linux 发行版的开放式开发平台。它提供了大量的内存和储存空间，以满足各类应用程序开发。 该平台还可以使用 Python、Node.js 和 C 语言进行设备应用程序开发。</p></li><li><p>在原型化过程中，平台可以利用免费的联发科云沙盒服务来存储云中的数据。</p></li></ul><h5 id="硬件开发包"><a href="#硬件开发包" class="headerlink" title="硬件开发包"></a>硬件开发包</h5><p>LinkIt Smart 7688 开发平台提供两种开发板：</p><ul><li>LinkIt Smart 7688：仅 MPU，有 MediaTek MT7688 驱动。</li><li>LinkIt Smart 7688 Duo：MPU 和 MCU，由 MT7688 和 Atmeag32U4 驱动。</li></ul><h5 id="软件开发工具"><a href="#软件开发工具" class="headerlink" title="软件开发工具"></a>软件开发工具</h5><ul><li>LinkIt Smart 7688 为多种任务提供了软件开发工具，如配置开发板、更新主板固件、管理开发板板的 Arduino 支持和软件安装等。</li><li>有关软件开发工具和辅助程序的详细信息，请参阅第 4 章“软件和工具”。 </li></ul><h5 id="开始向导"><a href="#开始向导" class="headerlink" title="开始向导"></a>开始向导</h5><p>LinkIt Smart 7688 和 LinkIt Smart 7688 Duo 的应用步骤包含以下方面：</p><ul><li>建立开发环境</li><li>连接到 LinkIt Smart 7688 开发板</li><li><p>升级开发板固件</p></li><li><p>访问并使用系统控制台</p></li><li>在 LinkIt Smart 7688 开发板上运行闪烁灯例程</li><li>连接到 Internet </li></ul><p>您可以在 MediaTek Lab 网站上找到 LinkIt Smart 7688 的开始向导，并学习如何运行一个闪烁灯例程 。</p><h6 id="文档、代码例程和相关信息"><a href="#文档、代码例程和相关信息" class="headerlink" title="文档、代码例程和相关信息"></a>文档、代码例程和相关信息</h6><p>以下是几个有助于LinkIt Smart 7688软件开发的参考资料：</p><ul><li>开发者向导，最新版本在<a href="http://labs.mediatek.com/fileMedia/download/22008eac-3fdc-4f19-b2d7-1b6aad86ea67" target="_blank" rel="noopener">MediaTek Labs</a>网站可找到。</li><li><a href="http://labs.mediatek.com/fileMedia/download/416ce559-fd67-4cdb-81ae-24074cbe19ed" target="_blank" rel="noopener">LinkIt Smart 7688开发板引脚图</a>：提供开发板管脚引出的详细信息。</li><li><a href="http://labs.mediatek.com/fileMedia/download/759415ff-8d0d-48ed-9f8e-eac57c58594e" target="_blank" rel="noopener">LinkIt Smart 7688 Duo开发板引脚图</a>：提供开发板管脚引出的详细信息。</li></ul><p>另外还有几个有助于设计最终的设备硬件的参考资料：</p><ul><li><p><a href="http://labs.mediatek.com/fileMedia/download/fb05ebc1-9eda-4f56-bf86-9c226942fd2b" target="_blank" rel="noopener">LinkIt Smart 7688硬件参考设计</a>：包含：</p><p>LinkIt Smart 7688开发板原理图和布局</p><p>LinkIt Smart 7688开发板引脚图</p><p>MediaTek MT7688AN芯片数据手册</p></li><li><p><a href="http://labs.mediatek.com/fileMedia/download/84cab720-7a87-4552-87c2-a68eb358f262" target="_blank" rel="noopener">LinkIt Smart 7688 Duo硬件参考设计</a>：包含：</p><p>LinkIt Smart 7688开发板原理图和布局</p><p>LinkIt Smart 7688开发板引脚图</p><p>MediaTek MT7688AN芯片数据手册</p></li></ul><p>其他文档可能会不时出现，您可以在MediaTek Labs网站的开发平台<a href="http://labs.mediatek.com/site/global/developer_tools/mediatek_linkit_assist_2502/documentation/index.gsp" target="_blank" rel="noopener">文档页面</a>上找到。</p><h5 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h5><p>LinkIt Smart 7688 开发平台基于开源 Linux 发行版，支持各种高级编程软件，您可以在下面找到<br>有关软件开发的更多信息：</p><ul><li><a href="http://wiki.openwrt.org/doc/howto/user.beginner" target="_blank" rel="noopener">OpenWrt</a></li><li>C</li><li><a href="https://www.python.org/" target="_blank" rel="noopener">Python</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>(jacaScript)</li><li><a href="https://www.arduino.cc/en/Reference/HomePage" target="_blank" rel="noopener">Arduino</a></li></ul><h4 id="硬件开发包-1"><a href="#硬件开发包-1" class="headerlink" title="硬件开发包"></a>硬件开发包</h4><p>​    这一部分主要介绍MT7688AN芯片和硬件Linkit SMart 7688 Duo的参数，规格，电路一开发工具</p><p>​    LinkIt Smart 7688硬件开发包分为两种开发板：LinkIt Smart 7688（仅MPU）和LinkIt Smart 7688 Duo（具备MPU和MCU）。其中MPU是MediaTek的MT7688AN芯片，MCU则为Atmega32U4。</p><p>​    MPU支持OpenWrt Linux发行版，它集中处理各类逻辑任务并提供Wi-Fi连接，它支持Python、Node.js和C语言开发。MCU负责处理实时的外设控制及运行Arduino程序。</p><h5 id="MediaTek-MT7688AN芯片规格概述"><a href="#MediaTek-MT7688AN芯片规格概述" class="headerlink" title="MediaTek MT7688AN芯片规格概述"></a>MediaTek MT7688AN芯片规格概述</h5><p>MT7688AN芯片规格如表4所示。</p><table><thead><tr><th>MT7688芯片规格</th><th></th></tr></thead><tbody><tr><td>CPU</td><td>MIPS24Kec（580MHz）</td></tr><tr><td>总DMIPs</td><td>560×1.6DMIPs</td></tr><tr><td>I-Cache,D-Cache</td><td>62KB，32KB</td></tr><tr><td>L2Cache</td><td>N/A</td></tr><tr><td>Memory</td><td>DDR1/DDR2   16bits   Max 2Gb，193MHz</td></tr><tr><td>SPI Flash</td><td>3B addr mode(max   127Mbit)   4B addr mode   (max 512  Mbit)</td></tr><tr><td>SD</td><td>SD-XC(class 10)</td></tr><tr><td>RF</td><td>1T1R 802.11n   2.4GHz</td></tr><tr><td>封装</td><td>DR-QFN156-12 mm ×12 mm</td></tr></tbody></table><table><thead><tr><th>接口</th><th>数量</th></tr></thead><tbody><tr><td>PCIe</td><td>1</td></tr><tr><td>USB2.0</td><td>1</td></tr><tr><td>Fash Ethernet   Switch</td><td>5</td></tr><tr><td>I2S</td><td>1</td></tr><tr><td>PCM</td><td>1</td></tr><tr><td>PWM</td><td>4</td></tr><tr><td>SPI</td><td>1</td></tr><tr><td>I2C</td><td>1</td></tr><tr><td>UARTLite</td><td>3</td></tr><tr><td>JTAG</td><td>1</td></tr></tbody></table><pre><code>表 4MT7688AN芯片规格</code></pre><h5 id="LinkIt-Smart-7688"><a href="#LinkIt-Smart-7688" class="headerlink" title="LinkIt Smart 7688"></a>LinkIt Smart 7688</h5><p>LinkIt Smart 7688是一块可用于物联网设备的高集成度、紧凑的硬件开发板。</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-10_20-51-05.png" alt="Snipaste_2018-12-10_20-51-05"></p><h6 id="关键特性"><a href="#关键特性" class="headerlink" title="关键特性"></a>关键特性</h6><p>LinkIt Smart 7688的关键特性如下：</p><ul><li>1T1R Wi-Fi 802.11b/g/n (2.4G)</li><li>GPIO、I2C、I2S、SPI、UART、PWM和Ethernet端口引出</li><li>580MHz MIPS CPU</li><li>32MB flash和128MB DDR2 RAM</li><li>USB host</li><li>Micro SD插槽</li></ul><h6 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h6><p>略</p><h5 id="LinkIt-Smart-7688-Duo"><a href="#LinkIt-Smart-7688-Duo" class="headerlink" title="LinkIt Smart 7688 Duo"></a>LinkIt Smart 7688 Duo</h5><p>​    LinkIt Smart 7688 Duo开发板拥使用一款和LinkIt Smart 7688一样的MT7688AN芯片，但它还有一颗Atmega32U4 MCU。因此，它支持一些额外的功能，如模拟I/O、支持Arduino IDE等。这款开发板的功能是两款芯片的组合：搭载OpenWrt Linux系统的MT7688AN芯片负责Wi-Fi和以太网连接，使用Arduino程序的Atmega32U4负责各类外设控制。</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-10_20-56-52.png" alt="Snipaste_2018-12-10_20-56-52"></p><h6 id="关键特性-1"><a href="#关键特性-1" class="headerlink" title="关键特性"></a>关键特性</h6><p>LinkIt Smart 7688 Duo的关键特性如下：</p><ul><li>1T1R Wi-Fi 802.11b/g/n (2.4G)</li><li><p>GPIO、I2C、I2S、SPI、UART、PWM、ADC和Ethernet端口引出</p></li><li><p>580MHz MIPS CPU</p></li><li>32MB flash和128MB DDR2 RAM</li><li>USB host</li><li>Micro SD插槽</li><li>支持Arduino（Atmega32U4）</li></ul><h6 id="详细介绍-1"><a href="#详细介绍-1" class="headerlink" title="详细介绍"></a>详细介绍</h6><ul><li>按钮</li><li>LEDs</li><li>天线</li><li>USB Host</li><li>USB 电源</li></ul><p><strong>按钮</strong></p><p>下表介绍了LinkIt Smart 7688 Duo开发板上的按钮的功能</p><table><thead><tr><th>情景</th><th>按钮</th><th>用法</th></tr></thead><tbody><tr><td>复位MPU</td><td>MPU复位按钮</td><td>按一下</td></tr><tr><td>复位MCU</td><td>MCU复位按钮</td><td>按一下</td></tr><tr><td>进入MCU的bootloader模式   （8秒后超时）</td><td>MCU复位按钮</td><td>750ms内连续按两次</td></tr><tr><td>把Wi-Fi复位到AP模式</td><td>Wi-Fi复位按钮</td><td>按下并保持至少5秒后释放（开发板已启动的情况下）</td></tr><tr><td>恢复出厂设置并进入AP模式   （警告：开发板会恢复到默认设置并删除所有用户数据）</td><td>Wi-Fi 复位按钮</td><td>按下并保持至少20秒后释放（开发板已启动的情况下）</td></tr><tr><td>使用U盘升级固件</td><td>Wi-Fi 复位按钮</td><td>按下并保持至少5秒后释放（开发板正在上电启动时）</td></tr><tr><td>使用U盘升级启动引导程序（bootloader）</td><td>Wi-Fi 复位按钮</td><td>按下并保持至少20秒后释放（开发板正在上电启动时）</td></tr></tbody></table><p><strong>LEDs</strong></p><ul><li><p>电源</p><p>当开发板上电时，绿色的电源LED保持常亮。</p></li><li><p>Wi-Fi</p><p>Wi-Fi LED呈橙色，其闪烁模式如表3所示。</p></li></ul><table><thead><tr><th>模式</th><th>状态</th><th>LED闪烁模式</th></tr></thead><tbody><tr><td>AP模式</td><td>有客户端设备</td><td>每秒闪烁3次，然后是0.5s的暂停，不断重复</td></tr><tr><td>无客户端设备</td><td>熄灭</td><td></td></tr><tr><td>STA模式</td><td>未连接</td><td>熄灭</td></tr><tr><td>正在连接</td><td>每秒闪烁两次</td><td></td></tr><tr><td>已连接</td><td>随着数据包的传输而闪烁</td></tr></tbody></table><p>​    表 LinkIt Smart 7688的Wi-Fi LED闪烁模式</p><p>有关Wi-Fi的AP模式和STA模式的详细信息，请参阅后面“网络环境”。</p><ul><li>D13引脚LED</li></ul><p>这颗LED是由用户的Arduino控制的。</p><p><strong>天线</strong></p><p>LinkIt Smart 7688开发板支持两种天线：</p><p>1)      内置的Wi-Fi芯片天线，这是默认天线</p><p>2)      外部天线：I-PEX接口</p><p>​    若要使用I-PEX接口，请把I-PEX接口左上角的电阻R233拆除，如图所示。</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-10_21-10-05.png" alt="Snipaste_2018-12-10_21-10-05"></p><p>图 拆除电阻才能使用I-PEX接口</p><p><strong>USB Host</strong></p><p>​    LinkIt Smart 7688有USB Host功能，用户可以用它连接各种USB设备，如网络摄像头、U盘、键盘、摇杆等等。开发板上使用的是USB micro-AB型接口</p><p><strong>USB 电源</strong></p><p>​    LinkIt Smart 7688有USB Host功能，用户可以用它连接各种USB设备，如网络摄像头、U盘、键盘、摇杆等等。开发板上使用的是USB micro-AB型接口</p><h5 id="开发中所需其他附件"><a href="#开发中所需其他附件" class="headerlink" title="开发中所需其他附件"></a>开发中所需其他附件</h5><p>USB电源线（必须）：USB A型接口转micro-AB型接口的USB线，用于给开发板供电。</p><p>USB OTG线（可选）：用来连接A型接口的USB设备，如U盘、USB摄像头等</p><p>USB转串口线（可选）：用来与Linux系统控制台进行通讯。</p><p>SD卡（可选）：作为外部存储空间，用于存放应用程序代码和数据。</p><p>U盘（可选）：外部存储，也可用于存储待升级的LinkIt Smart 7688启动引导程序和固件。</p><h5 id="JTAG"><a href="#JTAG" class="headerlink" title="JTAG"></a>JTAG</h5><p>​    您可以使用JTAG接口调试MT7688AN。要访问JTAG接口，您需要把开发板上的电阻R95拆下来，并重新把它焊接到R3的位置。完成这一步后重启开发板即可激活JTAG功能。具体的硬件操作步骤如下：</p><ul><li><p>找到的LinkIt Smart 7688开发板背面右上角的一组电阻，如图4红色圆圈所示。</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-10_21-23-10.png" alt="Snipaste_2018-12-10_21-23-10"></p></li><li><p>把电阻拆下来并重新焊接到右边的位置，如图5所示。完成这一步之后，重启开发板即可激活JTAG功能。</p></li></ul><p><img src="D:\MyBlog\图片\Snipaste_2018-12-10_21-23-35.png" alt="Snipaste_2018-12-10_21-23-35"></p><h5 id="转接板（不必要）"><a href="#转接板（不必要）" class="headerlink" title="转接板（不必要）"></a>转接板（不必要）</h5><p>Seed Studio为LinkIt Smart 7688/7688 Duo提供了转接板，这块转接板提供了所有的MT7688AN和Atmega32U4管脚引出，您可以使用它轻松连接各类传感器和外设</p><h5 id="引脚图"><a href="#引脚图" class="headerlink" title="引脚图"></a>引脚图</h5><p>引脚图有助于您为LinkIt Smart 7688 Duo开发板的引脚和对应外设（如GPIO、PWM、I2C、I2S、UARTI等）建立映射关系。您也可以在<a href="http://labs.mediatek.com/fileMedia/download/759415ff-8d0d-48ed-9f8e-eac57c58594e" target="_blank" rel="noopener">MediaTek网站</a>下载</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-10_21-35-57.png" alt="Snipaste_2018-12-10_21-35-57"></p><h5 id="各种情景下LinkIt-Smart-7688-Duo的近视功耗"><a href="#各种情景下LinkIt-Smart-7688-Duo的近视功耗" class="headerlink" title="各种情景下LinkIt Smart 7688 Duo的近视功耗"></a>各种情景下LinkIt Smart 7688 Duo的近视功耗</h5><table><thead><tr><th>情景</th><th>近似功耗</th><th></th></tr></thead><tbody><tr><td>建立Wi-Fi连接</td><td>峰值</td><td>596.4 mA</td></tr><tr><td>平均值</td><td>273.5 mA</td><td></td></tr><tr><td>设备启动</td><td>峰值</td><td>672.6 mA</td></tr><tr><td>平均值</td><td>248.9 mA</td><td></td></tr><tr><td>通过Wi-Fi下载文件到SD卡</td><td>峰值</td><td>605.4 mA</td></tr><tr><td>平均值</td><td>300.4 mA</td><td></td></tr><tr><td>通过Wi-Fi下载文件到U盘</td><td>峰值</td><td>616.6 mA</td></tr><tr><td>平均值</td><td>347.5 mA</td><td></td></tr><tr><td>通过Wi-Fi下载文件到Flash</td><td>峰值</td><td>578.5 mA</td></tr><tr><td>平均值</td><td>336.3 mA</td></tr></tbody></table><p>表7 典型功耗</p><h5 id="LinkIt-Smart-7688-Duo规格参数"><a href="#LinkIt-Smart-7688-Duo规格参数" class="headerlink" title="LinkIt Smart 7688 Duo规格参数"></a>LinkIt Smart 7688 Duo规格参数</h5><table><thead><tr><th>类别</th><th>特性</th><th>规格参数</th></tr></thead><tbody><tr><td>MPU</td><td>芯片</td><td>MT7688AN</td></tr><tr><td>内核</td><td>MIPS24KEc</td><td></td></tr><tr><td>时钟速度</td><td>580MHz</td><td></td></tr><tr><td>工作电压</td><td>3.3V</td><td></td></tr><tr><td>MCU</td><td>芯片</td><td>ATmega32U4</td></tr><tr><td>内核</td><td>Atmel AVR</td><td></td></tr><tr><td>时钟速度</td><td>8MHz</td><td></td></tr><tr><td>工作电压</td><td>3.3V</td><td></td></tr><tr><td>PCB大小</td><td>尺寸</td><td>60.8×26mm</td></tr><tr><td>内存</td><td>Flash</td><td>32MB</td></tr><tr><td>RAM</td><td>128MB DDR2</td><td></td></tr><tr><td>电源</td><td>USB电源</td><td>5V(USB micro-B)</td></tr><tr><td>VCC</td><td>3.3V (管脚引出)</td><td></td></tr><tr><td>GPIO</td><td>引脚数</td><td>3（MT7688AN）   24（Atmega32U4）</td></tr><tr><td>引脚号</td><td>P1,P8,P9,A0,A1,A2,A3,A4,A5,S0,S1,S2,S3,D0,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,</td><td></td></tr><tr><td>电压</td><td>3.3V</td><td></td></tr><tr><td>PWM</td><td>引脚数</td><td>8（Atmega32U4）</td></tr><tr><td>引脚号</td><td>D3, D5, D6, D9, D10, D11, D12, D13</td><td></td></tr><tr><td>电压</td><td>3.3V</td><td></td></tr><tr><td>最大分辨率</td><td>16位（可自定义）</td><td></td></tr><tr><td>最大频率@分辨率</td><td>31.25kHz@8-bit   Timer 0 (4 sets)</td><td></td></tr><tr><td>2MHz@2-bit   122Hz@16 -bit   Timer 1 &amp;3 (4 sets)</td><td></td><td></td></tr><tr><td>187.5kHz@8-bit    46.875kHz@10-bit    Timer 4 (6 sets)</td><td></td><td></td></tr><tr><td>ADC</td><td>引脚数</td><td>12 ( ATmega32U4)</td></tr><tr><td>引脚号</td><td>A0,A1,A2,A3,A4,A5,D4,D6,D8,D9,D10,D12</td><td></td></tr><tr><td>电压</td><td>3.3V</td><td></td></tr><tr><td>外部中断</td><td>引脚数</td><td>8 ( ATmega32U4)</td></tr><tr><td>引脚号</td><td>S0,S1,S2,S3,D8,D9,D10,D11</td><td></td></tr><tr><td>SPI</td><td>数量</td><td>1 ( ATmega32U4)</td></tr><tr><td>引脚号</td><td>S0, S1, S2, S3</td><td></td></tr><tr><td>最高速度</td><td>4MHz</td><td></td></tr><tr><td>I2C</td><td>数量</td><td>1</td></tr><tr><td>引脚号</td><td>D2,D3</td><td></td></tr><tr><td>速度</td><td>400K</td><td></td></tr><tr><td>串口</td><td>数量</td><td>1 (MT7688AN)</td></tr><tr><td>1 (ATmega32U4)</td><td></td><td></td></tr><tr><td>引脚号</td><td>P8,P9(MT7688AN)</td><td></td></tr><tr><td>D0, D1(ATmega32U4)</td><td></td><td></td></tr><tr><td>最高速度</td><td>115200bps(MT7688AN)</td><td></td></tr><tr><td>0.5 Mbps(ATmega32U4)</td><td></td><td></td></tr><tr><td>USB   Host</td><td>数量</td><td>1 (MT7688AN)</td></tr><tr><td>引脚号</td><td>P6,P7</td><td></td></tr><tr><td>接口类型</td><td>Micro-AB</td><td></td></tr><tr><td>通讯</td><td>Wi-Fi</td><td>1T1R 802.11b/g/n(2.4G)</td></tr><tr><td>以太网</td><td>1-port 10/100 FE PHY</td><td></td></tr><tr><td>引脚号</td><td>P2,P3,P4,P5</td><td></td></tr><tr><td>用户存储</td><td>SD卡</td><td>Micro   SD    SDXC</td></tr></tbody></table><p>表8 LinkIt Smart 7688 Duo开发板规格参数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章注要介绍开发联发科LinkIt™ Smart 7688 开发平台，LinkIt Smart 7688 Duo开发平台的软件工具一开发使用文档以及LinkIt Smart 7688 Duo硬件和规格的简单介绍&lt;/p&gt;
&lt;h4 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h4&gt;&lt;p&gt;联发科技创意实验室（MediaTek Labs）推出的 LinkIt™ Smart 7688 开发平台。该联发科技 LinkIt 开发平台系列可提供多种开发环境选项来加速各种先进的Wi-Fi 无线连接设备的开发进程，比如利用云服务的 IP 摄像头、监控设备、智能电器和无线网关。&lt;/p&gt;
    
    </summary>
    
      <category term="MT7688入门" scheme="https://github.com/SetCalm/setcalm.github.io/categories/MT7688%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="MT7688" scheme="https://github.com/SetCalm/setcalm.github.io/tags/MT7688/"/>
    
  </entry>
  
  <entry>
    <title>M2_MT7688创建第一个示例_D13闪烁</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/M2-%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A4%BA%E4%BE%8B-D13%E9%97%AA%E7%83%81.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/M2-创建第一个示例-D13闪烁.html</id>
    <published>2018-12-09T15:46:40.000Z</published>
    <updated>2018-12-18T18:43:01.680Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>今天来创建MT7688的第一个实例：使LinkIt Smart 7688 Duo板上的D13 LED每秒闪烁一次</p></li><li><p>Arduino 在<code>Serial1</code> 端口上侦听使用Python程序从Linux端发出的命令。每次从<code>Serial1</code> 端口上监听到MT7688上的Python程序放松的命令时  ，都会更改电路板上D13 LED的状态。</p></li><li><p>下图是LinkIt Smart 7688 硬件架构 与mpu和mcu通信原理图</p><a id="more"></a></li></ul><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-10_00-02-23.png" alt="Snipaste_2018-12-10_00-02-23"></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-09_23-55-03.png" alt="Snipaste_2018-12-09_23-55-03">将Arduino代码上传到LinkIt Smart 7688 Duo的Atmega32u4</p><p>打开Arduino IDE并在“  文件”  菜单上单击“  新建”，然后复制并粘贴以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> setup（）&#123; </span><br><span class="line">    Serial.begin（<span class="number">115200</span>）; <span class="comment">//打开USB Serial的串行连接</span></span><br><span class="line">                           <span class="comment">//端口（连接到您的计算机）</span></span><br><span class="line">    Serial1.begin（<span class="number">57600</span>）; <span class="comment">//打开内部串行连接</span></span><br><span class="line">                           <span class="comment">// MT7688</span></span><br><span class="line"></span><br><span class="line">    pinMode（<span class="number">13</span>，OUTPUT）; <span class="comment">//在MT7688中，这映射到设备</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> loop（）&#123; </span><br><span class="line">      <span class="keyword">int</span> c = Serial1.read（）; <span class="comment">//从MT7688读取</span></span><br><span class="line">      <span class="keyword">if</span>（c！= <span class="number">-1</span>）&#123;</span><br><span class="line">            <span class="keyword">switch</span>（c）&#123; </span><br><span class="line">                  case'0'：//收到“0”时关闭D13</span><br><span class="line">                  digitalWrite（<span class="number">13</span>,<span class="number">0</span>）; </span><br><span class="line">                  <span class="keyword">break</span>; </span><br><span class="line">                  case'1'：//收到“1”时打开D13 </span><br><span class="line">                  digitalWrite（<span class="number">13</span>,<span class="number">1</span>）; </span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">            &#125; </span><br><span class="line">      &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“验证/编译” 文件</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-10_00-52-06.png" alt="Snipaste_2018-12-10_00-52-06"></p><p>选择COM口</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-10_00-53-50.png" alt="Snipaste_2018-12-10_00-53-50"></p><p>点击项目–&gt;上传，将代码上传到MT7688，显示上传成功。</p><p>但是此时你不会看到LED闪烁，因为它正在等待 你接下来要创建的程序的MT7688的phython程序发送命令。</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-10_00-54-32.png" alt="Snipaste_2018-12-10_00-54-32"></p><h4 id="创建一个Python程序，给Arduino发送命令"><a href="#创建一个Python程序，给Arduino发送命令" class="headerlink" title="创建一个Python程序，给Arduino发送命令"></a>创建一个Python程序，给Arduino发送命令</h4><p>打开putty在配置窗口中键入  <code>mylinkit.local</code> ，单击SSH单选按钮，然后点击open</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-10_00-28-53.png" alt="Snipaste_2018-12-10_00-28-53"></p><ul><li>输入用户名和密码，进入控制台</li></ul><ul><li>输入<code>vim blink_on_duo.py</code>创建 blink_on_duo.p文件</li><li></li><li>文本编辑器打开后，<code>i</code>按键进入编辑模式。将下面代码复制到编辑器中。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">s = None</span><br><span class="line"></span><br><span class="line">def setup():</span><br><span class="line">    # open serial COM port to /dev/ttyS0, which maps to UART0(D0/D1)</span><br><span class="line">    # the baudrate is <span class="built_in">set</span> to <span class="number">57600</span> <span class="keyword">and</span> should be the same as the one</span><br><span class="line">    # specified in the Arduino sketch uploaded to ATMega32U4.</span><br><span class="line">    global s</span><br><span class="line">    s = serial.Serial(<span class="string">"/dev/ttyS0"</span>, <span class="number">57600</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def loop():</span><br><span class="line">    # send <span class="string">"1"</span> to the Arduino sketch on ATMega32U4.</span><br><span class="line">    # the sketch will turn on the LED attached to D13 on the board</span><br><span class="line">    s.write(<span class="string">"1"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    # send <span class="string">"0"</span> to the sketch to turn off the LED</span><br><span class="line">    s.write(<span class="string">"0"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    setup()</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        loop()</span><br></pre></td></tr></table></figure><ul><li>保存文件。按下<code>Esc</code>键进入普通模式，然后  按下<code>:</code>wq！退出编辑器。</li><li>通过<code>python ./blink_on_duo.py</code> 在系统控制台中运行Python程序  。</li></ul><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-10_02-08-59.png" alt="Snipaste_2018-12-10_02-08-59"></p><h4 id="观察LinkIt-Smart-7688-Duo板上的D13-LED指示灯闪烁"><a href="#观察LinkIt-Smart-7688-Duo板上的D13-LED指示灯闪烁" class="headerlink" title="观察LinkIt Smart 7688 Duo板上的D13 LED指示灯闪烁"></a>观察LinkIt Smart 7688 Duo板上的D13 LED指示灯闪烁</h4><p>执行Python程序后，您会看到LinkIt Smart 7688 Duo板上的D13 LED每秒闪烁一次。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;今天来创建MT7688的第一个实例：使LinkIt Smart 7688 Duo板上的D13 LED每秒闪烁一次&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arduino 在&lt;code&gt;Serial1&lt;/code&gt; 端口上侦听使用Python程序从Linux端发出的命令。每次从&lt;code&gt;Serial1&lt;/code&gt; 端口上监听到MT7688上的Python程序放松的命令时  ，都会更改电路板上D13 LED的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下图是LinkIt Smart 7688 硬件架构 与mpu和mcu通信原理图&lt;/p&gt;
    
    </summary>
    
      <category term="MT7688编程" scheme="https://github.com/SetCalm/setcalm.github.io/categories/MT7688%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="MT7688" scheme="https://github.com/SetCalm/setcalm.github.io/tags/MT7688/"/>
    
  </entry>
  
  <entry>
    <title>L3_vim入门</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/L3-vim%E5%85%A5%E9%97%A8.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/L3-vim入门.html</id>
    <published>2018-12-09T08:39:22.000Z</published>
    <updated>2018-12-17T05:40:13.550Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>今天学习中使用到vim文本编辑器，忽然发现不太会使用了。心里一百句mmb，一段时间未用就快忘记了。所以也看出笔记的重要性。因此重新预习下vim并记录下来，以备以后查看。</p><a id="more"></a><h4 id="安装Vim"><a href="#安装Vim" class="headerlink" title="安装Vim"></a>安装Vim</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令行输入：sudo apt-get install vim</span><br></pre></td></tr></table></figure><h4 id="Vim的几种模式"><a href="#Vim的几种模式" class="headerlink" title="Vim的几种模式"></a>Vim的几种模式</h4><h5 id="六种模式介绍"><a href="#六种模式介绍" class="headerlink" title="六种模式介绍"></a>六种模式介绍</h5><ul><li>普通模式(Normal mode)</li></ul><blockquote><p>在普通模式中，用的编辑器命令，比如移动光标，删除文本等等。这也是Vim启动后的默认模式。</p></blockquote><ul><li>插入模式(Insert mode)</li></ul><blockquote><p>在这个模式中，大多数按键都会向文本缓冲中插入文本。大多数新用户希望文本编辑器编辑过程中一直保持这个模式。</p><p>在插入模式中，可以按<code>ESC</code>键回到普通模式。</p></blockquote><ul><li>可视模式(Visual mode)</li></ul><blockquote><p>这个模式与普通模式比较相似。但是移动命令会扩大高亮的文本区域。高亮区域可以是字符、行或者是一块文本。当执行一个非移动命令时，命令会被执行到这块高亮的区域上。Vim的”文本对象”也能和移动命令一样用在这个模式中。</p></blockquote><ul><li>选择模式(Select mode)</li></ul><blockquote><p>这个模式和无模式编辑器的行为比较相似（Windows标准文本控件的方式）。这个模式中，可以用鼠标或者光标键高亮选择文本，不过输入任何字符的话，Vim会用这个字符替换选择的高亮文本块，并且自动进入插入模式。</p></blockquote><ul><li>命令行模式(Command line mode)</li></ul><blockquote><p>在命令行模式中可以输入会被解释成并执行的文本。例如执行命令（<code>:</code>键），搜索（<code>/</code>和<code>?</code>键）或者过滤命令（<code>!</code>键）。在命令执行之后，Vim返回到命令行模式之前的模式，通常是普通模式。</p></blockquote><ul><li>Ex模式(Ex mode)</li></ul><blockquote><p>这和命令行模式比较相似，在使用<code>:visual</code>命令离开Ex模式前，可以一次执行多条命令。</p></blockquote><h5 id="三种常用模式使用"><a href="#三种常用模式使用" class="headerlink" title="三种常用模式使用"></a>三种常用模式使用</h5><h6 id="使用vim命令进入vim界面"><a href="#使用vim命令进入vim界面" class="headerlink" title="使用vim命令进入vim界面"></a>使用vim命令进入vim界面</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim Test.c <span class="comment">//创建test.c文件</span></span><br></pre></td></tr></table></figure><p>此时编辑器在普通模式下</p><h6 id="进入插入（编辑）模式"><a href="#进入插入（编辑）模式" class="headerlink" title="进入插入（编辑）模式"></a>进入插入（编辑）模式</h6><p>在普通模式下使用使用<code>i</code>进入插入模式。如下所示右下方显示INSERT</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-09_17-16-20.png" alt="Snipaste_2018-12-09_17-16-20"></p><p>以下为插入模式下几种插入方式：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>i</code></td><td>在当前光标处进行编辑</td></tr><tr><td><code>I</code></td><td>在行首插入</td></tr><tr><td><code>A</code></td><td>在行末插入</td></tr><tr><td><code>a</code></td><td>在光标后插入编辑</td></tr><tr><td><code>o</code></td><td>在当前行后插入一个新行</td></tr><tr><td><code>O</code></td><td>在当前行前插入一个新行</td></tr><tr><td><code>cw</code></td><td>替换从光标所在位置后到一个单词结尾的字符</td></tr></tbody></table><h6 id="进入普通模式"><a href="#进入普通模式" class="headerlink" title="进入普通模式"></a>进入普通模式</h6><p>在插入或命令模式下直接按<code>Esc</code>进入普通模式。如下所示右下方无任何信息</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-09_17-19-45.png" alt="Snipaste_2018-12-09_17-19-45"></p><p>以下为普通模式下几种命令方式：</p><p>进入普通模式，使用下列命令可以进行文本快速删除：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code></td><td>删除游标所在的字符</td></tr><tr><td><code>X</code></td><td>删除游标所在前一个字符</td></tr><tr><td><code>Delete</code></td><td>同<code>x</code></td></tr><tr><td><code>dd</code></td><td>删除整行</td></tr><tr><td><code>dw</code></td><td>删除一个单词（不适用中文）</td></tr><tr><td><code>d$</code>或<code>D</code></td><td>删除至行尾</td></tr><tr><td><code>d^</code></td><td>删除至行首</td></tr><tr><td><code>dG</code></td><td>删除到文档结尾处</td></tr><tr><td><code>d1G</code></td><td>删至文档首部</td></tr></tbody></table><p>除此之外，你还可以在命令之前加上数字，表示一次删除多行，如：</p><p><code>2dd</code>表示一次删除2行</p><h6 id="进入命令模式"><a href="#进入命令模式" class="headerlink" title="进入命令模式"></a>进入命令模式</h6><p>在普通模式输入<code>:</code>进入命令行模式。如下所示右下方显示  ：</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-09_17-30-22.png" alt="Snipaste_2018-12-09_17-30-22"></p><p>以下为命令行模式下几种命令：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>:q!</code></td><td>强制退出，不保存</td></tr><tr><td><code>:q</code></td><td>退出</td></tr><tr><td><code>:wq</code></td><td>保存并退出</td></tr><tr><td><code>:wq!</code></td><td>强制保存并退出</td></tr><tr><td><code>:w &lt;文件路径&gt;</code></td><td>另存为</td></tr><tr><td><code>:saveas 文件路径</code></td><td>另存为</td></tr><tr><td><code>:x</code></td><td>保存并退出</td></tr><tr><td>：set nu</td><td>显示行号</td></tr><tr><td>：set nonu</td><td>不显示行号</td></tr><tr><td>：syntax on</td><td>代码高亮</td></tr></tbody></table><h4 id="Vim的终极配置方案"><a href="#Vim的终极配置方案" class="headerlink" title="Vim的终极配置方案"></a>Vim的终极配置方案</h4><p>Vim 的全局配置一般在<code>/etc/vim/vimrc</code>或者<code>/etc/vimrc</code>，对所有用户生效。</p><p>用户个人的配置名：vi<code>~/.vimrc</code>。</p><p>我的个人vim配置方案参考：<a href="http://www.cnblogs.com/rickyk/p/3839674.html（直接copy该博客的）" target="_blank" rel="noopener">http://www.cnblogs.com/rickyk/p/3839674.html（直接copy该博客的）</a></p><p>实际效果如下：</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-09_22-51-07.png" alt="Snipaste_2018-12-09_22-51-07"></p><p>一些vim配置入门参考：<a href="http://www.ruanyifeng.com/blog/2018/09/vimrc.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/09/vimrc.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;今天学习中使用到vim文本编辑器，忽然发现不太会使用了。心里一百句mmb，一段时间未用就快忘记了。所以也看出笔记的重要性。因此重新预习下vim并记录下来，以备以后查看。&lt;/p&gt;
    
    </summary>
    
      <category term="Vim入门" scheme="https://github.com/SetCalm/setcalm.github.io/categories/Vim%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Linux" scheme="https://github.com/SetCalm/setcalm.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>M1_MT7688程序设计环境配置</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/M1-MT7688Duo%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%20-%20%E5%89%AF%E6%9C%AC.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/M1-MT7688Duo程序设计环境配置 - 副本.html</id>
    <published>2018-12-07T16:00:00.000Z</published>
    <updated>2018-12-18T18:42:50.469Z</updated>
    
    <content type="html"><![CDATA[<p>注：由于使用的开发板为LinkIt Smart 7688 Duo，因此后续不会有LinkIt Smart 7688。或一笔带过。</p><h3 id="程序设计环境向导"><a href="#程序设计环境向导" class="headerlink" title="程序设计环境向导"></a>程序设计环境向导</h3><p>这一章介绍：</p><ul><li>本平台使用的操作系统</li><li>LinkIt Smart 7688开发平台提供的程序设计环境</li><li>各种程序设计模型以及如何在开发板上使用</li><li>用于与开发板进行Wi-Fi通信的网络环境</li><li>使用C/C++、Python和Node.js创建应用程序的方法</li></ul><a id="more"></a><h4 id="本平台使用的操作系统"><a href="#本平台使用的操作系统" class="headerlink" title="本平台使用的操作系统"></a>本平台使用的操作系统</h4><p>LinkIt Smart 7688开发平台使用OpenWrt开源嵌入式Linux操作系统，这个操作系统最初是针对嵌入式设备 (如无线路由器) 而开发的。OpenWrt的主要特性如下：</p><p>1)      大量的网络控制功能</p><p>2)      完全可写的文件系统，同时具备包管理</p><p>3)      丰富和可扩展的功能集，超过3400种软件包且数量还在不断增长。</p><h4 id="程序设计环境概述"><a href="#程序设计环境概述" class="headerlink" title="程序设计环境概述"></a>程序设计环境概述</h4><ul><li>LinkIt Smart 7688开发平台运行在OpenWrt Linux环境，它支持本地C/C++、高级语言Python和JavaScript（使用Node.js）开发。</li><li>通过本地应用程序，您可以为需要更高性能的设备创建驱动程序、框架和系统应用程序。而通过高级语言开发则使您能够快速构建设备原型。</li><li>因为LinkIt Smart 7688没有显示器，所以您需要在一台独立的计算机上远程开发高级程序，通常把这台计算机称为主机平台。大部分的编辑和开发工作都在主机平台上完成，最终生成的程序再传送到LinkIt Smart 7688这个目标平台上执行</li></ul><table><thead><tr><th>编程语言</th><th>工具和库</th><th>应用</th><th>主机平台</th></tr></thead><tbody><tr><td>C/C++</td><td>交叉编译工具链</td><td>系统编程</td><td>l  OS X   l  Linux</td></tr><tr><td>Python</td><td>LinkIt Smart 7688的 Python运行时库</td><td>l  设备原型化   l  网络   l  物联网应用</td><td>l  OS X   l  Linux   l  Windows</td></tr><tr><td>Node.js</td><td>LinkIt Smart 7688的 Node.js运行时库</td><td>l  设备原型化   l  网络   l  物联网应用</td><td>l  OS X   l  Linux   l  Windows</td></tr></tbody></table><h4 id="各种程序设计模型以及如何在开发板上使用"><a href="#各种程序设计模型以及如何在开发板上使用" class="headerlink" title="各种程序设计模型以及如何在开发板上使用"></a>各种程序设计模型以及如何在开发板上使用</h4><p> 图11显示了LinkIt Smart 7688和LinkIt Smart 7688 Duo的程序设计模型以及有关的用于访问传感器的软件栈。</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-12_17-41-39.png" alt="Snipaste_2018-12-12_17-41-39"></p><p>​    在LinkIt Smart 7688 Duo开发板中，各类外部设备和外设连接到Atmega32U4，并受MCU的控制。但是，由于MPU和MCU可以通过UART接口进行通讯，所以您既可以选择使用C/C++、Python和Node.js为MPU开发应用程序，也可以使用Arduino为MCU开发Arduino程序。</p><p>而在LinkIt Smart7688开发板中，各类外部设备和外设都直接连接到MT7688AN MPU上并由Linux系统控制。设备应用程序也是在MT7688ANMPU的Linux系统中执行。</p><h5 id="LinkIt-Smart-7688开发平台的Wi-Fi通讯共有三种模式"><a href="#LinkIt-Smart-7688开发平台的Wi-Fi通讯共有三种模式" class="headerlink" title="LinkIt Smart 7688开发平台的Wi-Fi通讯共有三种模式"></a>LinkIt Smart 7688开发平台的Wi-Fi通讯共有三种模式</h5><ul><li>AP model</li><li>Station model</li><li>Repeater model</li></ul><h5 id="AP-model"><a href="#AP-model" class="headerlink" title="AP model"></a>AP model</h5><p>在AP模式下，LinkIt Smart 7688开发板作为一个热点组建一个局域网，如图12所示。AP模式主要用于配置开发板设置。</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-12_19-01-37.png" alt="Snipaste_2018-12-12_19-01-37"></p><p>图12 LinkIt Smart 7688运行在AP模式</p><h5 id="Station-model"><a href="#Station-model" class="headerlink" title="Station model"></a>Station model</h5><p>在STA模式下，LinkIt Smart 7688开发板可以加入一个已知的Wi-Fi网络并访问Internet，如图13所示。</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-12_19-02-56.png" alt="Snipaste_2018-12-12_19-02-56"></p><p>图13 LinkIt Smart 7688运行在STA模式</p><p>Station model除了可以让应用程序在Internet上访问远程系统或云服务之外，还可以让用户使用opkg软件包管理器将软件从OpenWrt安装到开发板上。这时，您的计算机需加入到与开发板相同的Wi-Fi网中，并通过 SSH协议连接到开发板。</p><h5 id="Repeater-model"><a href="#Repeater-model" class="headerlink" title="Repeater model"></a>Repeater model</h5><p>在Repeater model模式下，LinkIt Smart 7688开发板可以加入一个已知的Wi-Fi网络并访问Internet，并且自身作为也可以作为热点被其他设备连接组建一个局域网。</p><p>其模式为前连者的结合体。</p><h4 id="设置MT7688编程环境"><a href="#设置MT7688编程环境" class="headerlink" title="设置MT7688编程环境"></a>设置MT7688编程环境</h4><h5 id="建立C-C-编程环境"><a href="#建立C-C-编程环境" class="headerlink" title="建立C/C++编程环境"></a>建立C/C++编程环境</h5><p>略（失败）</p><p><img src="D:\MyBlog\图片\Snipaste_2018-12-13_19-22-03.png" alt="Snipaste_2018-12-13_19-22-03"></p><p>交叉编译工具链包含在LinkIt Smart 7688 SDK的软件包中，它支持Mac OS X和Linux系统，在编写这个文档时还不支持Windows系统。要使用这个工具链，请把它下载并解压到您选择的目录，并把工具链目录命名为CC_TOOLS。</p><h6 id="C语言的Hello-World例程"><a href="#C语言的Hello-World例程" class="headerlink" title="C语言的Hello World例程"></a>C语言的Hello World例程</h6><p>1)      打开文本编辑器并创建一个名为helloworld.c的文件</p><p>2)      复制并粘贴下方的示例代码，保存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span>** argv)</span> </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  <span class="built_in">printf</span>( <span class="string">"Hello, World!\n "</span>); </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3)      在主机PC，输入以下命令对代码进行交叉编译</p><p>CC_TOOLS/bin/mipsel-openwrt-linux-g++ helloworld.c -o helloworld</p><p>4)      假设主机环境已连接到LinkIt Smart 7688的Wi-Fi网络，使用SCP工具将生成的名为helloworld的二进制文件传送到 LinkIt Smart 7688。 例如：</p><p>scp ./helloworld <a href="mailto:root@mylinkit.local" target="_blank" rel="noopener">root@mylinkit.local</a>:helloworld</p><p>5)      最后，在LinkIt Smart 7688的SSH终端执行这个程序：</p><p># ./helloworld </p><p>现在，您应该能看到屏幕输出了字符串“Hello,World！”。</p><p>参考：<a href="http://www.cnblogs.com/gtsup/p/9448220.html" target="_blank" rel="noopener">http://www.cnblogs.com/gtsup/p/9448220.html</a></p><h5 id="建立Python编程环境"><a href="#建立Python编程环境" class="headerlink" title="建立Python编程环境"></a>建立Python编程环境</h5><ul><li>高级编程语言由LinkIt<br>Smart 7688中的相应语言解释器执行。您可以远程编程，然后将代码发送到LinkIt Smart 7688中执行。</li><li>高级编程语言环境很简单，您只需要安装一个文本编辑器和一个用来在计算机和LinkIt Smart 7688之间传输程序文件的工具软件即可</li></ul><h6 id="安装SCP工具"><a href="#安装SCP工具" class="headerlink" title="安装SCP工具"></a>安装SCP工具</h6><h6 id="Python语言的Hello-World例程"><a href="#Python语言的Hello-World例程" class="headerlink" title="Python语言的Hello World例程"></a>Python语言的Hello World例程</h6><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>开发板：LinkIt Smart 7688 Duo</p><p>Putty：<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="noopener">https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a></p><!--more--><h4 id="登录7688-Duo-Board的Web-UI"><a href="#登录7688-Duo-Board的Web-UI" class="headerlink" title="登录7688 Duo Board的Web UI"></a>登录7688 Duo Board的Web UI</h4><ul><li>打开电路板（供电）。</li><li>在您的计算机上，搜索<em>LinkIt_Smart_7688_XXXXXX</em> Wi-Fi接入点（XXXXXX是MAC地址）并连接到主板。</li><li>打开  <code>http://mylinkit.local</code>，设置密码并登录LinkIt Smart 7688 Web UI。</li></ul><h5 id="使用micro-USB线为电路板加电"><a href="#使用micro-USB线为电路板加电" class="headerlink" title="使用micro-USB线为电路板加电"></a>使用micro-USB线为电路板加电</h5><ul><li>如下图1-1所示，连接LinkIt Smart 7688开发板。（将电缆连接到电源（<strong>PWR</strong>）接口，而不是MPU复位按钮附近的USB主机（<strong>HOST</strong>）接口。）</li><li>LED（绿色）将首先亮起，然后是Wi-Fi LED（橙色），它将闪烁一次。然后，大约4到5秒后，Wi-Fi LED将亮起以指示引导加载程序已初始化。</li><li>然后开始启动过程，大约需要30秒。接下来，Wi-Fi LED熄灭; 这意味着系统已准备好接受Wi-Fi连接。下图1-2显示了Wi-Fi LED状态如何与系统状态匹配。</li></ul><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_16-41-00.png" alt="Snipaste_2018-12-08_16-41-00"></p><p>图1-1</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_16-49-55.png" alt="Snipaste_2018-12-08_16-49-55"></p><p>图1-2</p><h5 id="将您的PC连接到LinkIt-Smart-7688开发板的wifi"><a href="#将您的PC连接到LinkIt-Smart-7688开发板的wifi" class="headerlink" title="将您的PC连接到LinkIt_Smart_7688开发板的wifi"></a>将您的PC连接到LinkIt_Smart_7688开发板的wifi</h5><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_16-53-25.png" alt="Snipaste_2018-12-08_16-53-25"></p><p>连接到<strong>LinkIt_Smart_7688_Duo</strong> 后，橙色LED将每秒闪烁三次。这表示该板处于<strong>AP</strong>模式。</p><p>此时你的电脑无法上网。因为它现在加入了LinkIt Smart 7688开发板形成的局域网（LAN），如下所示。</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_16-56-13.png" alt="Snipaste_2018-12-08_16-56-13"></p><h5 id="访问LinkIt-Smart-7688-Web-UI配置工具，设置密码"><a href="#访问LinkIt-Smart-7688-Web-UI配置工具，设置密码" class="headerlink" title="访问LinkIt Smart 7688 Web UI配置工具，设置密码"></a>访问LinkIt Smart 7688 Web UI配置工具，设置密码</h5><p>LinkIt Smart 7688 Web UI，这是一种配置电路板设置的工具。</p><ul><li>在您的Web浏览器中打开  <code>http://mylinkit.local</code>，如下所示。</li></ul><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_17-01-15.png" alt="Snipaste_2018-12-08_17-01-15"></p><p>设置密码，确定后，如下图</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_17-04-20.png" alt="Snipaste_2018-12-08_17-04-20"></p><h4 id="更新固件"><a href="#更新固件" class="headerlink" title="更新固件"></a>更新固件</h4><h5 id="下载固件"><a href="#下载固件" class="headerlink" title="下载固件"></a>下载固件</h5><p>固件：<a href="https://docs.labs.mediatek.com/resource/linkit-smart-7688/zh_cn/downloads" target="_blank" rel="noopener">https://docs.labs.mediatek.com/resource/linkit-smart-7688/zh_cn/downloads</a></p><p>在Web UI主页单击<strong>UPGRADE FIRMWARE</strong></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_17-09-59.png" alt="Snipaste_2018-12-08_17-09-59"></p><h5 id="运行LinkIt-Smart-7688固件更新程序应用程序"><a href="#运行LinkIt-Smart-7688固件更新程序应用程序" class="headerlink" title="运行LinkIt Smart 7688固件更新程序应用程序"></a>运行LinkIt Smart 7688固件更新程序应用程序</h5><ul><li>单击  <strong>选择文件</strong>  并选择  <em>lks7688.img</em>  文件，然后单击  <strong>升级和重新启动</strong></li></ul><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_17-10-59.png" alt="Snipaste_2018-12-08_17-10-59"></p><p>如下图所示，等待结束</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_17-11-50.png" alt="Snipaste_2018-12-08_17-11-50"></p><ul><li><p>确保电源稳定。Wi-Fi LED闪烁约3分钟（固件正在更新），然后电路板将重新启动，LED指示灯将保持亮起约30秒（重新启动）。最后，电路板进入<strong>AP</strong>模式并准备连接。</p></li><li><p>找到<em>LinkIt_Smart_7688_XXXXXX</em> AP并通过Wi-Fi连接电路板。请注意，在将电路板连接到客户端设备后，Wi-Fi LED每秒闪烁3次。现在，重新加载  <em>mylinkit.local</em>  网页，设置新密码并登录。新的固件版本详细信息将显示在  <strong>软件信息下</strong>，如下所示。</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_17-16-32.png" alt="Snipaste_2018-12-08_17-16-32"></p></li></ul><h4 id="安装终端模拟器putty并登录"><a href="#安装终端模拟器putty并登录" class="headerlink" title="安装终端模拟器putty并登录"></a>安装终端模拟器putty并登录</h4><p>打开putty和在配置窗口中键入  <code>mylinkit.local</code> 在  主机名中，单击SSH单选按钮，然后打开</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_17-28-22.png" alt="Snipaste_2018-12-08_17-28-22"></p><p>初次登录会弹出安全警报窗口，单击Yes</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_17-30-00.png" alt="Snipaste_2018-12-08_17-30-00"></p><p>显示PuTTY终端窗口。使用 您之前在Web UI中设置的用户名  <em>root</em>和密码登录。登录后如下图</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_17-31-19.png" alt="Snipaste_2018-12-08_17-31-19"></p><p>终端模拟器安装并登录成功。</p><h4 id="将7688-Duo-Board连接到Internet"><a href="#将7688-Duo-Board连接到Internet" class="headerlink" title="将7688 Duo Board连接到Internet"></a>将7688 Duo Board连接到Internet</h4><h5 id="将LinkIt-Smart-7688连接到具有Internet访问权限的Wi-Fi接入点"><a href="#将LinkIt-Smart-7688连接到具有Internet访问权限的Wi-Fi接入点" class="headerlink" title="将LinkIt Smart 7688连接到具有Internet访问权限的Wi-Fi接入点"></a>将LinkIt Smart 7688连接到具有Internet访问权限的Wi-Fi接入点</h5><ul><li>在浏览器中打开  <code>mylinkit.local</code>，并使用您的密码登录Web UI。在Web UI中单击“  NetWork”</li></ul><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_17-37-43.png" alt="Snipaste_2018-12-08_17-37-43"></p><ul><li>在  <strong>网络设置</strong> 屏幕中，选择 <strong>Repeater  mode</strong>。从“  <strong>检测到的Wi-Fi网络”</strong>  列表中选择要连接的AP，选择AP后输入密码。并设置中继器SSID名称和密码。单击  <strong>配置和重新启动</strong> 以完成，如下所示</li></ul><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_17-41-49.png" alt="Snipaste_2018-12-08_17-41-49"></p><h5 id="将主机连接到同一网络中的AP"><a href="#将主机连接到同一网络中的AP" class="headerlink" title="将主机连接到同一网络中的AP"></a>将主机连接到同一网络中的AP</h5><p>打开计算机上的Wi-Fi连接到步骤1中使用的同一访问点。您的计算机现在位于由您连接的Wi-Fi接入点形成的同一局域网下</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_17-50-13.png" alt="Snipaste_2018-12-08_17-50-13"></p><h5 id="检查Internet连接"><a href="#检查Internet连接" class="headerlink" title="检查Internet连接"></a>检查Internet连接</h5><p>通过<strong>ping –c 5 <a href="http://www.mediatek.com" target="_blank" rel="noopener">www.mediatek.com</a></strong> 在终端窗口中输入来检查您是否建立了互联网连接。，结果如下图那么您已连接到Wi-Fi网络的AP。</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_17-52-56.png" alt="Snipaste_2018-12-08_17-52-56"></p><h4 id="使用板级支持包安装Arduino-IDE"><a href="#使用板级支持包安装Arduino-IDE" class="headerlink" title="使用板级支持包安装Arduino IDE"></a>使用板级支持包安装Arduino IDE</h4><p>由于MT7688 Duo板载ATmega32U4，因此可以使用  Arduino IDE开发环境</p><ul><li>安装Arduino IDE 1.6.4或更高版本。</li><li>安装板支撑包。</li><li>ARDUINO：<a href="https://www.arduino.cc/en/Main/Software" target="_blank" rel="noopener">https://www.arduino.cc/en/Main/Software</a></li></ul><h5 id="安装Arduino-IDE"><a href="#安装Arduino-IDE" class="headerlink" title="安装Arduino IDE"></a>安装Arduino IDE</h5><p>下载Arduino IDE 并且解压到安装目录，找到arduino.exe,快捷至桌面即可。</p><h5 id="安装板支撑包"><a href="#安装板支撑包" class="headerlink" title="安装板支撑包"></a>安装板支撑包</h5><ul><li>打开Arduino IDE，在“  <strong>文件”</strong> 菜单上单击  <strong>“首选项”</strong>。在<strong>Additional Boards Manager</strong> <strong>URL中</strong>添加  ，如下所示。   <code>http://download.labs.mediatek.com/package_mtk_linkit_smart_7688_index.json</code></li></ul><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_18-28-26.png" alt="Snipaste_2018-12-08_18-28-26"></p><ul><li>确保您的计算机已连接到互联网。</li><li>在“  <strong>工具”</strong> 菜单中指向“  <strong>板”，</strong> 然后单击“  <strong>板卡管理器”</strong>。</li></ul><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_18-40-54.png" alt="Snipaste_2018-12-08_18-40-54">板卡管理器自动下载储库。Boards Manager可能需要几秒钟才能下载存储库。 </p><p>选择LinkIt Smart 7688版本，然后单击“  <strong>安装”</strong>。（由于已经安装因此显示为删除）</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_18-47-13.png" alt="Snipaste_2018-12-08_18-47-13"></p><ul><li>安装完成后，Board Manager会指示已安装软件包，如下所示。</li></ul><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-08_18-49-53.png" alt="Snipaste_2018-12-08_18-49-53"></p><h4 id="安装LinkIt-Smart-7688-Duo-COM端口驱动程序"><a href="#安装LinkIt-Smart-7688-Duo-COM端口驱动程序" class="headerlink" title="安装LinkIt Smart 7688 Duo COM端口驱动程序"></a>安装LinkIt Smart 7688 Duo COM端口驱动程序</h4><h5 id="将LinkIt-Smart-7688-Duo开发板连接到计算机"><a href="#将LinkIt-Smart-7688-Duo开发板连接到计算机" class="headerlink" title="将LinkIt Smart 7688 Duo开发板连接到计算机"></a>将LinkIt Smart 7688 Duo开发板连接到计算机</h5><p>将micro USB线插入LinkIt Smart 7688 Duo板的Power / MCU连接器，另一端插入计算机。</p><h5 id="安装驱动程序"><a href="#安装驱动程序" class="headerlink" title="安装驱动程序"></a>安装驱动程序</h5><ul><li>从文件夹安装串行COM端口INF驱动程序  ：<br><code>{ARDUINO_IDE_PREFERENCE_LOCATION}/packages/LinkIt/hardware/avr/0.1.5/driver/linkit_smart_7688.inf</code> </li><li>您可以 从“ <strong>文件”</strong>菜单项<strong>“首选项”中</strong>找到ARDUINO_IDE_PREFERENCE_LOCATION。请参阅<strong>preference.txt</strong>路径，如下所示（图1）单击红线部分即会跳转（图2）。 </li></ul><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-09_11-40-16.png" alt="Snipaste_2018-12-09_11-40-16"></p><p>图1</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-09_11-42-38.png" alt="Snipaste_2018-12-09_11-42-38"></p><p>图2</p><p>按照<code>{ARDUINO_IDE_PREFERENCE_LOCATION}/packages/LinkIt/hardware/avr/0.1.5/driver/linkit_smart_7688.inf</code> 找到linkit_smart_7688.inf</p><ul><li>找到  后右点击<code>linkit_smart_7688.inf</code> 快捷菜单上后，单击“  <strong>安装”</strong>。会出现安装错误，如下所示，</li></ul><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-09_11-50-10.png" alt="Snipaste_2018-12-09_11-50-10"></p><h4 id="禁用“驱动程序签名强制”功能"><a href="#禁用“驱动程序签名强制”功能" class="headerlink" title="禁用“驱动程序签名强制”功能"></a>禁用“驱动程序签名强制”功能</h4><p>详细教程：<a href="https://jingyan.baidu.com/article/375c8e19c2b25b25f2a229a3.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/375c8e19c2b25b25f2a229a3.html</a></p><p>再次点击安装，如下图。单击“  <strong>安装此驱动程序软件”</strong>。这样就完成了驱动安装。</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-09_12-13-11.png" alt="Snipaste_2018-12-09_12-13-11"></p><p>MT7688的入门环境配置基本完成，接下来开始MT7688的软件编程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：由于使用的开发板为LinkIt Smart 7688 Duo，因此后续不会有LinkIt Smart 7688。或一笔带过。&lt;/p&gt;
&lt;h3 id=&quot;程序设计环境向导&quot;&gt;&lt;a href=&quot;#程序设计环境向导&quot; class=&quot;headerlink&quot; title=&quot;程序设计环境向导&quot;&gt;&lt;/a&gt;程序设计环境向导&lt;/h3&gt;&lt;p&gt;这一章介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本平台使用的操作系统&lt;/li&gt;
&lt;li&gt;LinkIt Smart 7688开发平台提供的程序设计环境&lt;/li&gt;
&lt;li&gt;各种程序设计模型以及如何在开发板上使用&lt;/li&gt;
&lt;li&gt;用于与开发板进行Wi-Fi通信的网络环境&lt;/li&gt;
&lt;li&gt;使用C/C++、Python和Node.js创建应用程序的方法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="MT7688入门" scheme="https://github.com/SetCalm/setcalm.github.io/categories/MT7688%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="MT7688" scheme="https://github.com/SetCalm/setcalm.github.io/tags/MT7688/"/>
    
  </entry>
  
  <entry>
    <title>L2_Linux(Ubuntu)的简单使用</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/L2-Ubuntu%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/L2-Ubuntu的简单使用.html</id>
    <published>2018-12-07T09:56:10.000Z</published>
    <updated>2018-12-10T06:54:16.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux-基础"><a href="#Linux-基础" class="headerlink" title="Linux 基础"></a>Linux 基础</h3><p>启动终端：快捷方式：Ctrl + Alt + T</p><h4 id="Linux目录和文件系统结构"><a href="#Linux目录和文件系统结构" class="headerlink" title="Linux目录和文件系统结构"></a>Linux目录和文件系统结构</h4><p>首先观察下Ubuntu的文件系统。Linux 和 Unix 文件系统被组织成一个有层次的树形结构。文件系统的最上层是 /，称为根目录</p><p>在终端下命令：ls</p><a id="more"></a><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-07_18-20-46.png" alt="Snipaste_2018-12-07_18-20-46"></p><ul><li>/bin - 重要的二进制 (binary) 应用程序</li><li>/boot - 启动 (boot) 配置文件</li><li>/dev - 设备 (device) 文件</li><li>/etc - 配置文件、启动脚本等 (etc)</li><li>/home - 本地用户主 (home) 目录</li><li>/lib - 系统库 (libraries) 文件</li><li>/lost+found - 在根 (/) 目录下提供一个遗失+查找(lost+found) 系统</li><li>/media - 挂载可移动介质 (media)，诸如 CD、数码相机等</li><li>/mnt - 挂载 (mounted) 文件系统</li><li>/opt - 提供一个供可选的 (optional) 应用程序安装目录</li><li>/proc - 特殊的动态目录，用以维护系统信息和状态，包括当前运行中进程 (processes) 信息。</li><li>/root - root (root) 用户主文件夹，读作“slash-root”</li><li>/sbin - 重要的系统二进制 (system binaries) 文件</li><li>/sys - 系统 (system) 文件</li><li>/tmp - 临时(temporary)文件</li><li>/usr - 包含绝大部分所有用户(users)都能访问的应用程序和文件</li><li>/var - 经常变化的(variable)文件，诸如日志或数据库等</li></ul><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><p>每个文件都有访问限制、用户限制以及隶属于某个用户/组(owner/group)。 所有文件皆有如下三组权限加以保护</p><ul><li>用户(user)：适用于该文件的所有者</li><li>组(group)：适用于该文件所属的组</li><li>其他(other)：适用于所有其他用户</li></ul><p>上述三组权限信息的每一组都包含了实际权限。</p><ul><li>读(read)：允许显示/打开该文件 可以显示目录内容</li><li>写(write)：可以编辑或删除该文件 可以更改目录内容</li><li>可执行(execute)：可执行文件可以作为程序运行 可以进入该目录</li></ul><h5 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h5><p>   命令：ls -l </p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-07_18-40-44.png" alt="Snipaste_2018-12-07_18-40-44"></p><p>命令执行显示结果的每一列含义（<a href="https://blog.csdn.net/zhuoya_/article/details/77418413）" target="_blank" rel="noopener">https://blog.csdn.net/zhuoya_/article/details/77418413）</a></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-07_18-40-14.png" alt="Snipaste_2018-12-07_18-40-14"></p><h5 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h5><p>（<a href="https://www.cnblogs.com/123-/p/4189072.html）" target="_blank" rel="noopener">https://www.cnblogs.com/123-/p/4189072.html）</a></p><h6 id="chmod-改变文件或目录的权限"><a href="#chmod-改变文件或目录的权限" class="headerlink" title="chmod 改变文件或目录的权限"></a>chmod 改变文件或目录的权限</h6><ul><li>chmod 755 abc：赋予abc权限rwxr-xr-x</li><li>chmod u=rwx，g=rx，o=rx abc：同上u=用户权限，g=组权限，o=不同组其他用户权限</li><li>chmod u-x，g+w abc：给abc去除用户执行的权限，增加组写的权限</li><li>chmod a+r abc：给所有用户添加读的权限</li></ul><h6 id="改变所有者（chown）和用户组（chgrp）命令"><a href="#改变所有者（chown）和用户组（chgrp）命令" class="headerlink" title="改变所有者（chown）和用户组（chgrp）命令"></a>改变所有者（chown）和用户组（chgrp）命令</h6><ul><li>chown xiaoming abc：改变abc的所有者为xiaoming</li><li>chgrp root abc：改变abc所属的组为root</li><li>chown root ./abc：改变abc这个目录的所有者是root</li><li>chown ‐R root ./abc：改变abc这个目录及其下面所有的文件和目录的所有者是roo</li></ul><h6 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h6><ul><li>在添加用户时，可以指定将该用户添加到哪个组中，同样用root的管理权限可以改变某个用户所在的组</li><li>- usermod ‐g 组名 用户名</li><li>你可以用</li><li>- usermod ‐d 目录名 用户名，改变该用户登录的初始目录</li></ul><h6 id="例：修改Videos权限"><a href="#例：修改Videos权限" class="headerlink" title="例：修改Videos权限"></a>例：修改Videos权限</h6><p>chmod 777 Videos  赋予Videos权限rwxrwxrwx</p><p> <img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-07_19-01-38.png" alt="Snipaste_2018-12-07_19-01-38"></p><h4 id="一些常用命令"><a href="#一些常用命令" class="headerlink" title="一些常用命令"></a>一些常用命令</h4><ul><li>启动终端：Ctrl + Alt + T</li></ul><h5 id="文件系统中跳转"><a href="#文件系统中跳转" class="headerlink" title="文件系统中跳转"></a>文件系统中跳转</h5><p>（<a href="http://billie66.github.io/TLCL/book/chap03.html" target="_blank" rel="noopener">http://billie66.github.io/TLCL/book/chap03.html</a>）</p><ul><li>pwd - 打印当前工作目录的名称</li><li>cd - 更改目录</li><li>ls - 列出目录内容</li><li>pwd - 打印出当前工作目录名</li><li>cd - 更改目录</li><li>ls - 列出目录内容</li></ul><p>ls命令选项</p><table><thead><tr><th>选项</th><th>长选项</th><th>描述</th></tr></thead><tbody><tr><td>-a</td><td>–all</td><td>列出所有文件，甚至包括文件名以圆点开头的默认会被隐藏的隐藏文件。</td></tr><tr><td>-d</td><td>–directory</td><td>通常，如果指定了目录名，ls 命令会列出这个目录中的内容，而不是目录本身。 把这个选项与 -l 选项结合使用，可以看到所指定目录的详细信息，而不是目录中的内容。</td></tr><tr><td>-F</td><td>–classify</td><td>这个选项会在每个所列出的名字后面加上一个指示符。例如，如果名字是 目录名，则会加上一个’/‘字符。</td></tr><tr><td>-h</td><td>–human-readable</td><td>当以长格式列出时，以人们可读的格式，而不是以字节数来显示文件的大小。</td></tr><tr><td>-l</td><td></td><td>以长格式显示结果。</td></tr><tr><td>-r</td><td>–reverse</td><td>以相反的顺序来显示结果。通常，ls 命令的输出结果按照字母升序排列。</td></tr><tr><td>-S</td><td></td><td>命令输出结果按照文件大小来排序。</td></tr><tr><td>-t</td><td></td><td>按照修改时间来排序。</td></tr></tbody></table><h5 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h5><ul><li>mkdir - 创建目录</li><li>cp - 复制文件和目录</li><li>mv - 移动/重命名文件和目录</li><li>rm - 删除文件和目录</li><li>ln - 创建硬链接和符号链接</li></ul><h6 id="mkdir-创建目录dir1"><a href="#mkdir-创建目录dir1" class="headerlink" title="mkdir - 创建目录dir1"></a>mkdir - 创建目录dir1</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir dir1  //创建目录dir1</span><br><span class="line">mkdir dir1 dir2 dir3  //创建目录dir1 dir2 dir3</span><br></pre></td></tr></table></figure><h6 id="cp-复制文件和目录"><a href="#cp-复制文件和目录" class="headerlink" title="cp - 复制文件和目录"></a>cp - 复制文件和目录</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp item1 item2   <span class="comment">//复制单个文件或目录”item1”到文件或目录”item2”</span></span><br><span class="line">cp item... directory  <span class="comment">//复制多个项目（文件或目录）到一个目录下</span></span><br></pre></td></tr></table></figure><p> cp 选项</p><table><thead><tr><th>选项</th><th>意义</th></tr></thead><tbody><tr><td>-a, –archive</td><td>复制文件和目录，以及它们的属性，包括所有权和权限。 通常，复本具有用户所操作文件的默认属性。</td></tr><tr><td>-i, –interactive</td><td>在重写已存在文件之前，提示用户确认。如果这个选项不指定， cp 命令会默认重写文件。</td></tr><tr><td>-r, –recursive</td><td>递归地复制目录及目录中的内容。当复制目录时， 需要这个选项（或者-a 选项）。</td></tr><tr><td>-u, –update</td><td>当把文件从一个目录复制到另一个目录时，仅复制 目标目录中不存在的文件，或者是文件内容新于目标目录中已经存在的文件。</td></tr><tr><td>-v, –verbose</td><td>显示翔实的命令操作信息</td></tr></tbody></table><p>cp 实例</p><table><thead><tr><th>命令</th><th>运行结果</th></tr></thead><tbody><tr><td>cp file1 file2</td><td>复制文件 file1 内容到文件 file2。如果 file2 已经存在， file2 的内容会被 file1 的内容重写。如果 file2 不存在，则会创建 file2。</td></tr><tr><td>cp -i file1 file2</td><td>这条命令和上面的命令一样，除了如果文件 file2 存在的话，在文件 file2 被重写之前， 会提示用户确认信息。</td></tr><tr><td>cp file1 file2 dir1</td><td>复制文件 file1 和文件 file2 到目录 dir1。目录 dir1 必须存在。</td></tr><tr><td>cp dir1/* dir2</td><td>使用一个通配符，在目录 dir1 中的所有文件都被复制到目录 dir2 中。 dir2 必须已经存在。</td></tr><tr><td>cp -r dir1 dir2</td><td>复制目录 dir1 中的内容到目录 dir2。如果目录 dir2 不存在， 创建目录 dir2，操作完成后，目录 dir2 中的内容和 dir1 中的一样。 如果目录 dir2 存在，则目录 dir1 (和目录中的内容)将会被复制到 dir2 中。</td></tr></tbody></table><h6 id="mv-移动和重命名文件"><a href="#mv-移动和重命名文件" class="headerlink" title="mv - 移动和重命名文件"></a>mv - 移动和重命名文件</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv item1 item2  <span class="comment">//把文件或目录 “item1” 移动或重命名为 “item2”</span></span><br><span class="line">mv item... directory    <span class="comment">//把一个或多个条目从一个目录移动到另一个目录中</span></span><br></pre></td></tr></table></figure><p>mv 选项</p><table><thead><tr><th>选项</th><th>意义</th></tr></thead><tbody><tr><td>-i –interactive</td><td>在重写一个已经存在的文件之前，提示用户确认信息。 <strong>如果不指定这个选项，mv 命令会默认重写文件内容。</strong></td></tr><tr><td>-u –update</td><td>当把文件从一个目录移动另一个目录时，只是移动不存在的文件， 或者文件内容新于目标目录相对应文件的内容。</td></tr><tr><td>-v –verbose</td><td>当操作 mv 命令时，显示翔实的操作信息。</td></tr></tbody></table><p>mv 实例</p><table><thead><tr><th>mv file1 file2</th><th>移动 file1 到 file2。<strong>如果 file2 存在，它的内容会被 file1 的内容重写。</strong> 如果 file2 不存在，则创建 file2。 <strong>这两种情况下，file1 都不再存在。</strong></th></tr></thead><tbody><tr><td>mv -i file1 file2</td><td>除了如果 file2 存在的话，在 file2 被重写之前，用户会得到 提示信息外，这个和上面的选项一样。</td></tr><tr><td>mv file1 file2 dir1</td><td>移动 file1 和 file2 到目录 dir1 中。dir1 必须已经存在。</td></tr><tr><td>mv dir1 dir2</td><td>如果目录 dir2 不存在，创建目录 dir2，并且移动目录 dir1 的内容到 目录 dir2 中，同时删除目录 dir1。如果目录 dir2 存在，移动目录 dir1（及它的内容）到目录 dir2。</td></tr></tbody></table><h6 id="rm-删除文件和目录"><a href="#rm-删除文件和目录" class="headerlink" title="rm - 删除文件和目录"></a>rm - 删除文件和目录</h6><p>rm 命令用来移除（删除）文件和目录：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm item...   <span class="comment">//删除一个或多个文件或目录</span></span><br></pre></td></tr></table></figure><p>rm 选项</p><table><thead><tr><th>选项</th><th>意义</th></tr></thead><tbody><tr><td>-i, –interactive</td><td>在删除已存在的文件前，提示用户确认信息。 <strong>如果不指定这个选项，rm 会默默地删除文件</strong></td></tr><tr><td>-r, –recursive</td><td>递归地删除文件，这意味着，如果要删除一个目录，而此目录 又包含子目录，那么子目录也会被删除。要删除一个目录，必须指定这个选项。</td></tr><tr><td>-f, –force</td><td>忽视不存在的文件，不显示提示信息。这选项覆盖了“–interactive”选项。</td></tr><tr><td>-v, –verbose</td><td>在执行 rm 命令时，显示翔实的操作信息。</td></tr></tbody></table><p>rm 实例</p><table><thead><tr><th>命令</th><th>运行结果</th></tr></thead><tbody><tr><td>rm file1</td><td>默默地删除文件</td></tr><tr><td>rm -i file1</td><td>除了在删除文件之前，提示用户确认信息之外，和上面的命令作用一样。</td></tr><tr><td>rm -r file1 dir1</td><td>删除文件 file1, 目录 dir1，及 dir1 中的内容。</td></tr><tr><td>rm -rf file1 dir1</td><td>同上，除了如果文件 file1，或目录 dir1 不存在的话，rm 仍会继续执行。</td></tr></tbody></table><h6 id="ln-—-创建链接（不太了解）"><a href="#ln-—-创建链接（不太了解）" class="headerlink" title="ln — 创建链接（不太了解）"></a>ln — 创建链接（不太了解）</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln file link  <span class="comment">//创建硬链接</span></span><br><span class="line">ln -s item link  <span class="comment">//建符号链接</span></span><br></pre></td></tr></table></figure><h5 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h5><ul><li><p>帮助命令：man  某个命令</p></li><li><p>显示系统的网络 ：ifconfig     </p></li><li><p>df 显示文件系统空间信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h  用 M 和 G 做单位显示文件系统空间信息 -h 意思是 human-readable</span><br></pre></td></tr></table></figure></li><li><p>du 显示目录的空间使用信息<br>​      du -sh /media/floppy<br>​      -s 意思 summary  -h 意思 human-readable </p></li></ul><h4 id="命令行软件包管理"><a href="#命令行软件包管理" class="headerlink" title="命令行软件包管理"></a>命令行软件包管理</h4><h6 id="APT-Advanced-Package-Tool-高级软件包工具"><a href="#APT-Advanced-Package-Tool-高级软件包工具" class="headerlink" title="APT    (Advanced Package Tool,高级软件包工具)"></a>APT    (Advanced Package Tool,高级软件包工具)</h6><ul><li>安装软件包：<code>sudo apt-get install packagename</code></li><li>删除软件包:  <code>sudo apt-get remove packagename</code></li><li>获取新的软件包列表：<code>sudo apt-get update</code></li><li>升级有可用更新的系统：<code>sudo apt-get upgrade</code></li><li>列出更多命令和选项：<code>apt-get help</code></li></ul><h6 id="安装-卸载-deb-文件"><a href="#安装-卸载-deb-文件" class="headerlink" title="安装/卸载 .deb 文件"></a>安装/卸载 .deb 文件</h6><ul><li>要安装 .deb 文件，简单地双击它，然后选择 安装软件包 即可。</li><li>或者，您也可以打开一个终端并输入：<code>sudo dpkg -i package_file.deb</code>来安装 .deb 文件。</li><li>如需卸载 .deb 文件，在您软件包管理器中反选它，或输入：<code>sudo dpkg -r package_name</code></li></ul><h6 id="将-rpm-文件转为-deb-文件"><a href="#将-rpm-文件转为-deb-文件" class="headerlink" title="将 .rpm 文件转为 .deb 文件"></a>将 .rpm 文件转为 .deb 文件</h6><p>另一种软件包文件是 .rpm为后缀的 Red Hat 软件包管理器文件。可以使用程序 alien 将 .rpm 文件转化为.deb 文件。</p><ul><li>安装 alien 程序 (2 ― 添加、删除和更新应用程序)。</li><li>在终端使用管理权限运行以下命令：<code>sudo alien package_file.rpm</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Linux-基础&quot;&gt;&lt;a href=&quot;#Linux-基础&quot; class=&quot;headerlink&quot; title=&quot;Linux 基础&quot;&gt;&lt;/a&gt;Linux 基础&lt;/h3&gt;&lt;p&gt;启动终端：快捷方式：Ctrl + Alt + T&lt;/p&gt;
&lt;h4 id=&quot;Linux目录和文件系统结构&quot;&gt;&lt;a href=&quot;#Linux目录和文件系统结构&quot; class=&quot;headerlink&quot; title=&quot;Linux目录和文件系统结构&quot;&gt;&lt;/a&gt;Linux目录和文件系统结构&lt;/h4&gt;&lt;p&gt;首先观察下Ubuntu的文件系统。Linux 和 Unix 文件系统被组织成一个有层次的树形结构。文件系统的最上层是 /，称为根目录&lt;/p&gt;
&lt;p&gt;在终端下命令：ls&lt;/p&gt;
    
    </summary>
    
      <category term="Linux入门" scheme="https://github.com/SetCalm/setcalm.github.io/categories/Linux%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Linux" scheme="https://github.com/SetCalm/setcalm.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>L1_虚拟机安装Ubuntu系统</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/L1-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Ubuntu%E7%B3%BB%E7%BB%9F.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/L1-虚拟机安装Ubuntu系统.html</id>
    <published>2018-12-07T07:56:46.000Z</published>
    <updated>2018-12-10T06:54:25.031Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 18.0.01 LTS:<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">https://www.ubuntu.com/download/desktop</a></p><p>安装指南：<a href="https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-desktop?_ga=2.26529661.1364004595.1544156464-1403747218.1544156464#0" target="_blank" rel="noopener">https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-desktop?_ga=2.26529661.1364004595.1544156464-1403747218.1544156464#0</a></p><p>   U盘启动盘制作：<a href="https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-windows#0（未使用到，因为使用的虚拟机）" target="_blank" rel="noopener">https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-windows#0（未使用到，因为使用的虚拟机）</a></p><a id="more"></a><p>1.启动虚拟机（VMware）点击创建新的虚拟机–&gt;典型（推荐)（T）–&gt;下一步</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-07_16-25-47.png" alt="Snipaste_2018-12-07_16-25-47"></p><p>2.选择安装程序光盘映像文件（ios）</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-07_16-34-08.png" alt="Snipaste_2018-12-07_16-34-08"></p><p>3.填写安装信息（）</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-07_16-39-50.png" alt="Snipaste_2018-12-07_16-39-50"></p><p>4.命名虚拟机名字和位置</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-07_16-47-04.png" alt="Snipaste_2018-12-07_16-47-04"></p><p>5.点击下一步–&gt;下一步–&gt;完成(如下)</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-07_16-48-55.png" alt="Snipaste_2018-12-07_16-48-55"></p><p>6.等待片刻</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-07_16-53-06.png" alt="Snipaste_2018-12-07_16-53-06"></p><p>最终结果</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-12-07_17-51-46.png" alt="Snipaste_2018-12-07_17-51-46"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu 18.0.01 LTS:&lt;a href=&quot;https://www.ubuntu.com/download/desktop&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ubuntu.com/download/desktop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装指南：&lt;a href=&quot;https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-desktop?_ga=2.26529661.1364004595.1544156464-1403747218.1544156464#0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-desktop?_ga=2.26529661.1364004595.1544156464-1403747218.1544156464#0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   U盘启动盘制作：&lt;a href=&quot;https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-windows#0（未使用到，因为使用的虚拟机）&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-windows#0（未使用到，因为使用的虚拟机）&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu安装教程" scheme="https://github.com/SetCalm/setcalm.github.io/categories/Ubuntu%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="https://github.com/SetCalm/setcalm.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>S1_Stm32_创建库函数工程模板</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/S1-Stm32-%E5%88%9B%E5%BB%BA%E5%BA%93%E5%87%BD%E6%95%B0%E5%B7%A5%E7%A8%8B%E6%A8%A1%E6%9D%BF.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/S1-Stm32-创建库函数工程模板.html</id>
    <published>2018-11-22T14:36:57.000Z</published>
    <updated>2018-12-10T06:54:32.768Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://blog.csdn.net/m0_37101905/article/details/71056866" target="_blank" rel="noopener">https://blog.csdn.net/m0_37101905/article/details/71056866</a></p><h5 id="获取固件库"><a href="#获取固件库" class="headerlink" title="获取固件库"></a>获取固件库</h5><p>STM32F10x_StdPeriph_Lib_V3.5.0</p><h5 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h5><a id="more"></a><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-23_23-17-31.png" alt="Snipaste_2018-11-23_23-17-31"><br>0_Project：        放置工程文件<br>1_StartUp：         放置需要的核心启动文件等<br>2_User            stm32f10x.h头文件及系统配置头文件及主函数文件等<br>3_Libraries_3_5_0：    放置固件库提供的外设文件<br>4_Driver：         放置用户自己的驱动文件<br>5_Readme：         放置工程版本信息等</p><h5 id="Keil新建工程项目"><a href="#Keil新建工程项目" class="headerlink" title="Keil新建工程项目"></a>Keil新建工程项目</h5><p> 打开Keil5，点击新建工程,并将其保存到0_Project中</p><p>选择芯片类型，这里我们选择stm32f103ZE系列</p><p>忽略掉之后的自动配置设置</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-24_09-19-39.png" alt="Snipaste_2018-11-24_09-19-39"></p><p>新建工程项目成功，得到一个什么都没有的空工程</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-24_09-19-54.png" alt="Snipaste_2018-11-24_09-19-54"></p><h5 id="文件搬迁"><a href="#文件搬迁" class="headerlink" title="文件搬迁"></a>文件搬迁</h5><p><strong>启动文件搬迁（1.StarUp）</strong></p><p>定位到STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\CoreSupport下面，将文件core_cm3.c和文件core_cm3.h复制到1.StarUp下面去 。</p><p>定位到STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm 下面将里面startup_stm32f10x_md.s 文件复制到1.StarUp下面。(备注：因为我选择的芯片为stm32f103c8t6,为中等容量的芯片，故选择该启动文件，具体的芯片容量大小，还需根据具体的芯片手册参考选择)</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-23_23-19-12.png" alt="Snipaste_2018-11-23_23-19-12"></p><p><strong>stm32f10x.h头文件及系统配置头文件等搬迁（2_User）</strong><br>1.定位到STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x 下面，将里面的三个文件stm32f10x.h，system_stm32f10x.c，system_stm32f10x.h，复制到我的2_User目录之下。<br>2.然后将STM32F10x_StdPeriph_Lib_V3.5.0\Project\STM32F10x_StdPeriph_Template下面的4个文件main.c，stm32f10x_conf.h，stm32f10x_it.c， stm32f10x_it.h复制到2_User目录下面。</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-23_23-21-30.png" alt="Snipaste_2018-11-23_23-21-30"></p><p><strong>固件库外设文件搬迁（3_Libraries_3_5_0）</strong><br>打开官方固件库包，定位到我们之前准备好的固件库包的目录:STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver 下面，将目录下面的src,inc 文件夹 copy 到我们刚才建立的3_Libraries_3_5_0 文件夹下面。<br><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-23_23-22-04.png" alt="Snipaste_2018-11-23_23-22-04"><br><strong>自定义的驱动文件搬迁（4.Driver)</strong><br>用来添加工程中自定义的驱动文件，暂时不用添加。</p><h5 id="将搬迁的文件与工程联立起来"><a href="#将搬迁的文件与工程联立起来" class="headerlink" title="将搬迁的文件与工程联立起来"></a>将搬迁的文件与工程联立起来</h5><ol><li>在USER组中添加main.c,stm32f10x_it.c,system_stm32f10x.c等文件。</li><li>Libraries中添加我们项目工程需要的外设库文件，从2_Libraries_3.5.0-&gt;src文件夹中添加，这里我们先添加一个misc，stm32f10x_gpio，stm32f10x_rcc。stm32f10x_rcc等三个文件（其余文件根据项目需要添加）。</li><li>在StartUp组中将core_cm3.c,startup_stm32f10x_md.s添加进去</li><li>DIRVE组用来添加工程中自定义的驱动文件，暂时不用添加。</li></ol><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-23_23-27-44.png" alt="Snipaste_2018-11-23_23-27-44"></p><h5 id="魔术棒配置"><a href="#魔术棒配置" class="headerlink" title="魔术棒配置"></a>魔术棒配置</h5><p>target勾选Use MicroLIB  (Printf函数)</p><p>output勾选Creat HEX File（便于时生成Hex文件）</p><p>C/C++:添加宏：USE_STDPERIPH_DRIVER,STM32F10X_HD（后面宏根据mcu大小添加）</p><p>C/C++:添加头文件路径</p><p>Debug：use：ST-Link Debugger</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-23_23-32-33.png" alt="Snipaste_2018-11-23_23-32-33"></p><p>【Utilities】/【setting】选择128k Device Size。</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-23_23-35-01.png" alt="Snipaste_2018-11-23_23-35-01"></p><h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-23_23-36-55.png" alt="Snipaste_2018-11-23_23-36-55"></p><p>OK</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/m0_37101905/article/details/71056866&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/m0_37101905/article/details/71056866&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;获取固件库&quot;&gt;&lt;a href=&quot;#获取固件库&quot; class=&quot;headerlink&quot; title=&quot;获取固件库&quot;&gt;&lt;/a&gt;获取固件库&lt;/h5&gt;&lt;p&gt;STM32F10x_StdPeriph_Lib_V3.5.0&lt;/p&gt;
&lt;h5 id=&quot;创建文件夹&quot;&gt;&lt;a href=&quot;#创建文件夹&quot; class=&quot;headerlink&quot; title=&quot;创建文件夹&quot;&gt;&lt;/a&gt;创建文件夹&lt;/h5&gt;
    
    </summary>
    
      <category term="STM32学习" scheme="https://github.com/SetCalm/setcalm.github.io/categories/STM32%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Stm32" scheme="https://github.com/SetCalm/setcalm.github.io/tags/Stm32/"/>
    
  </entry>
  
  <entry>
    <title>A1_Altium Designer 17</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/A1-Altium-Designer-17.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/A1-Altium-Designer-17.html</id>
    <published>2018-11-17T03:48:28.000Z</published>
    <updated>2018-12-10T06:47:30.139Z</updated>
    
    <content type="html"><![CDATA[<h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><p><strong>软件：</strong></p><p>​      Altium Designer 17链接：<a href="https://pan.baidu.com/s/1YQuqvZi4rBtrRoqoq-R3Iw" target="_blank" rel="noopener">https://pan.baidu.com/s/1YQuqvZi4rBtrRoqoq-R3Iw</a> 密码：cnjg</p><p><strong>视频：</strong></p><p>​      <a href="https://www.bilibili.com/video/av16825310" target="_blank" rel="noopener">Altium Designer 17 绘制89C51开发板全程实战视频</a>.</p><p><strong>文档：</strong><br><a id="more"></a></p><p>​           1.在Altium-Designer画元件封装(超详细)</p><p>​        2.AD9原理图设计</p><p>​        3.    ad9-PCB</p><p>​            4.Altium-Design-PCB拼板完整教程</p><p>​        链接：<a href="https://pan.baidu.com/s/1sv7Q9H48Yh2IoZQpjoazlA" target="_blank" rel="noopener">https://pan.baidu.com/s/1sv7Q9H48Yh2IoZQpjoazlA</a> 密码：5xdw</p><p>网站链接：<a href="https://blog.csdn.net/tys591320/article/details/79224055" target="_blank" rel="noopener">https://blog.csdn.net/tys591320/article/details/79224055</a></p><h3 id="元件封装"><a href="#元件封装" class="headerlink" title="元件封装"></a>元件封装</h3><p><strong>目的</strong>：</p><p>​    学会使用Altium Designer 建立自己的元件库，并在里面画自己所需的元件原理图和封装。</p><p><strong>资料</strong>:</p><p>​       1.在Altium-Designer画元件封装(超详细)</p><p>​    LM2596S 的 PFD 说明书</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_19-20-27.png" alt="Snipaste_2018-11-17_19-20-27"></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_19-21-16.png" alt="Snipaste_2018-11-17_19-21-16"></p><p>基本描述：长 400mil，宽 180mil，管脚数 5，管脚直径 35mil，管</p><p>脚间距 67mil。1mm=39.370079mil,    100 mil=2.54mm</p><p>1— Vin</p><p>2— Vout</p><p>3— GND</p><p>4— FB</p><p>5— ON/OFF</p><p>目的：学会使用Altium Designer 建立自己的元件库，并在里面画自己所需的元件原理图和封装。</p><h4 id="元件库工程文件的创建"><a href="#元件库工程文件的创建" class="headerlink" title="元件库工程文件的创建"></a>元件库工程文件的创建</h4><p>1.File—&gt;New—&gt;project—&gt;integrated Library）另存到指定文件夹，命名为 my_Library</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_16-16-15.png" alt="Snipaste_2018-11-17_16-16-15"></p><p>2.向 my_Library工程中添加原理图库文件和 PCB库文件，修改命名。</p><p>​    2.1.右键点击My_Library.LibPkg 选 择Add New toProjiect—&gt;Schematic Library，保存为Stu.SchLib</p><p>​    2.2.右键点击My_Library.LibPkg 选 择Add New toProjiect—&gt;PCB Library，保存为Stu.PcbLib</p><p>3.右键点击My_Library.LibPkg—&gt;Save Project保存工程如下图</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_18-16-24.png" alt="Snipaste_2018-11-17_18-16-24"></p><h4 id="元件原理图库的创建"><a href="#元件原理图库的创建" class="headerlink" title="元件原理图库的创建"></a>元件原理图库的创建</h4><p> 在 Stu.Schlib原理图库文件中画 LM2596S 原理图</p><p>1.单击 Project—&gt;双击选中 Stu.Schlib—&gt;单击 SCH Library点击左下方 SCH Library</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_18-19-10.png" alt="Snipaste_2018-11-17_18-19-10"></p><p>​      2.点击Add添加一个元件原理图模型，命名为LM2596S 保存</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_18-20-16.png" alt="Snipaste_2018-11-17_18-20-16"></p><p>3.设置元件号（Default Designator ）为 LM2596S和注释（ Comment）为 3.3v,点OK</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_18-33-19.png" alt="Snipaste_2018-11-17_18-33-19"></p><p>4.画 LM2596s外框 ，点 Place—&gt;Rectangle</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_19-29-52.png" alt="Snipaste_2018-11-17_19-29-52"></p><p>或者</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_19-29-06.png" alt="Snipaste_2018-11-17_19-29-06"></p><p>5画LM2569管脚并修改管脚名与说明书上对应。</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_19-47-11.png" alt="Snipaste_2018-11-17_19-47-11"></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_19-52-00.png" alt="Snipaste_2018-11-17_19-52-00"></p><p>6.最终结果，保存</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_19-54-55.png" alt="Snipaste_2018-11-17_19-54-55"></p><h4 id="PCB封装库的创建"><a href="#PCB封装库的创建" class="headerlink" title="PCB封装库的创建"></a>PCB封装库的创建</h4><p>在 Stu.Pcblib文件中画 LM2596S PCB封装库</p><p>单击 Project—&gt;双击选中 Stu.Pcblib—&gt;单击 PCBLibrary</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_21-11-56.png" alt="Snipaste_2018-11-17_21-11-56"></p><p>双击 PCBCOMPONENT_1—–修改 Name为LM2596S 和 Description为3.3V</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_21-15-43.png" alt="Snipaste_2018-11-17_21-15-43"></p><p>画 PCB外框，长 400mil 宽 180 mil（注意：选中Top Overlay层画外框）</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_21-17-34.png" alt="Snipaste_2018-11-17_21-17-34"></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_21-30-44.png" alt="Snipaste_2018-11-17_21-30-44"></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_21-32-10.png" alt="Snipaste_2018-11-17_21-32-10"></p><p>PCB完成结果检测（Ctrl+M）</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_21-41-15.png" alt="Snipaste_2018-11-17_21-41-15"></p><p>保存</p><h4 id="连接元件原理图和PCB封装图"><a href="#连接元件原理图和PCB封装图" class="headerlink" title="连接元件原理图和PCB封装图"></a>连接元件原理图和PCB封装图</h4><p>点击Project-&gt;SchLib-&gt;SCH Library</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_21-50-33.png" alt="Snipaste_2018-11-17_21-50-33"></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_21-50-33.png" alt="Snipaste_2018-11-17_21-50-33"></p><p>添加 Add-&gt;ok</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_21-57-25.png" alt="Snipaste_2018-11-17_21-57-25"></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_21-58-00.png" alt="Snipaste_2018-11-17_21-58-00"></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_21-59-58.png" alt="Snipaste_2018-11-17_21-59-58"></p><p>依次点击</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_22-00-16.png" alt="Snipaste_2018-11-17_22-00-16"></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_22-00-32.png" alt="Snipaste_2018-11-17_22-00-32"></p><h4 id="文件编译"><a href="#文件编译" class="headerlink" title="文件编译"></a>文件编译</h4><p>必须对三个文件进行编译，所存储的文件下才会有这三个文件</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_22-09-36.png" alt="Snipaste_2018-11-17_22-09-36"></p><h4 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h4><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-17_22-09-47.png" alt="Snipaste_2018-11-17_22-09-47"></p><p>完成</p><h3 id="原理图设计"><a href="#原理图设计" class="headerlink" title="原理图设计"></a>原理图设计</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p> <strong>原理图设计实例-设计流程</strong></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-20_22-17-47.png" alt="Snipaste_2018-11-20_22-17-47"></p><p><strong>原理图设计实例-总图</strong></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-20_22-19-57.png" alt="Snipaste_2018-11-20_22-19-57"></p><p>·</p><h4 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h4><p>（1）执行 文件—&gt;新建—&gt;工程—&gt;命名为Stu_Project</p><p>（2）执行 文件—&gt;新建—&gt;原理图—&gt;保存并命名为命名为Stu.SchDoc</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-20_22-36-30.png" alt="Snipaste_2018-11-20_22-36-30"></p><h4 id="加载元件库"><a href="#加载元件库" class="headerlink" title="加载元件库"></a>加载元件库</h4><p>加载元件库命令在菜单【Design】中</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-20_22-37-33.png" alt="Snipaste_2018-11-20_22-37-33"></p><p>1．打开库文件面板（Libraries）【设计】-&gt;【浏览库】或者右下角【system】-&gt;【库】</p><p>2.在面板中选择Fazhang.Intlib库，将其设置为当前元件库，如下图</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-20_22-47-36.png" alt="Snipaste_2018-11-20_22-47-36"></p><h4 id="放置元器件"><a href="#放置元器件" class="headerlink" title="放置元器件"></a>放置元器件</h4><p>（1）双击元件名，元件的符号附着在鼠标光标上，跟随光标移动如下图</p><p>（2）按住鼠标左键，拖拽。</p><p>（3）多个相同的可以Ctrl+C,Ctrl+C复制粘贴。</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-20_22-53-16.png" alt="Snipaste_2018-11-20_22-53-16"></p><h4 id="移动元件及旋转元件及镜像元件"><a href="#移动元件及旋转元件及镜像元件" class="headerlink" title="移动元件及旋转元件及镜像元件"></a>移动元件及旋转元件及镜像元件</h4><p>1）将鼠标光标指向要移动的目标元件，按住鼠标左键不放，移动鼠标，元件即被移动.</p><p>2)点击鼠标选中元件，按space键即可旋转元件</p><p>3）点击元件，在可拖动的状态下按X或Y镜像。</p><h4 id="放置导线，电源端子及网络标号"><a href="#放置导线，电源端子及网络标号" class="headerlink" title="放置导线，电源端子及网络标号"></a>放置导线，电源端子及网络标号</h4><p>1）执行菜单命令【Place】/【Wire】或单击布线工具栏的<img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-20_23-22-51.png" alt="Snipaste_2018-11-20_23-22-51">按钮</p><p>2）在布线工具栏中单击 <img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-20_23-25-40.png" alt="Snipaste_2018-11-20_23-25-40">按钮，光标上出现一个网络标号“VCC”的“T”形电源符号</p><p>3）在布线工具栏中单击 <img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-20_23-24-28.png" alt="Snipaste_2018-11-20_23-24-28">  按钮，光标上出现一个网络标号“GND”的电源地符号</p><h4 id="放置网络标号"><a href="#放置网络标号" class="headerlink" title="放置网络标号"></a>放置网络标号</h4><p>（1）在布线工具栏中单击  <img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-20_23-24-21.png" alt="Snipaste_2018-11-20_23-24-21"> 按钮，光标上出现一个红色的<code>NetLabel</code>,将它放置在从元件的引脚引出的导线上。<em>**</em></p><p>2）单击网络标号，可以修改网络名称。</p><p>3）如果引脚A、B所连接的网络标号相同，表示A和B在电气上是相连的。</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-20_23-30-37.png" alt="Snipaste_2018-11-20_23-30-37"></p><h4 id="编辑与调整原理图"><a href="#编辑与调整原理图" class="headerlink" title="编辑与调整原理图"></a>编辑与调整原理图</h4><h5 id="自动标识元件"><a href="#自动标识元件" class="headerlink" title="自动标识元件"></a>自动标识元件</h5><p>1）执行菜单命令【工具】/【标注】，弹出自动标识元件【原理图标注】对话框</p><p>2）选择标识顺序。表示顺序的方式有4种</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-20_23-38-42.png" alt="Snipaste_2018-11-20_23-38-42"></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-20_23-45-04.png" alt="Snipaste_2018-11-20_23-45-04"></p><p>点击更新更改列表，接收更改(创建ECO)变亮，点击该按钮，执行变更，关闭即可。</p><p>完成相同</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-20_23-51-36.png" alt="Snipaste_2018-11-20_23-51-36"></p><h4 id="原理图的报表"><a href="#原理图的报表" class="headerlink" title="原理图的报表"></a>原理图的报表</h4><h5 id="1）生成网络表"><a href="#1）生成网络表" class="headerlink" title="1）生成网络表"></a>1）生成网络表</h5><p>​       网络表是指电路原理图中元件引脚等电气点相互连接的关系列表。</p><p>​    网络表是原理图与PCB的桥梁。它的主要用途是为PCB制板提供元件信息和线路连接信息，同时它也为仿真提供必要的信息。</p><p>​     a, 执行菜单命令【Design】/【Netlist For Project】/【Protel】，系统生成Protel网络表</p><h5 id="2-Reports菜单"><a href="#2-Reports菜单" class="headerlink" title="2)Reports菜单"></a>2)Reports菜单</h5><p>命令集中在报告（Reports）菜单里</p><p>​    <img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-21_00-07-31.png" alt="Snipaste_2018-11-21_00-07-31"></p><h5 id="3）材料清单报表（BOM）"><a href="#3）材料清单报表（BOM）" class="headerlink" title="3）材料清单报表（BOM）"></a>3）材料清单报表（BOM）</h5><p>执行菜单命令【Reports】/【Bill of Materials】</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-21_00-12-34.png" alt="Snipaste_2018-11-21_00-12-34"></p><p>点击Export保存xlsx，OK</p><h5 id="4-原理图的打印输出"><a href="#4-原理图的打印输出" class="headerlink" title="4)原理图的打印输出"></a>4)原理图的打印输出</h5><p>执行菜单命令【Reports】/【Simple BOM】，生成简易材料清单报表</p><p><strong>a.页面设置</strong></p><p>执行菜单命令【File】/【Page Setup…】</p><p><strong>b.打印预览和输出</strong></p><p>执行菜单命令【File】/【Print Preview …】</p><h3 id="PCB设计"><a href="#PCB设计" class="headerlink" title="PCB设计"></a>PCB设计</h3><h4 id="简介-基本常识"><a href="#简介-基本常识" class="headerlink" title="简介-基本常识"></a>简介-基本常识</h4><p><strong>PCB的设计实例-设计流程</strong></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-21_21-25-40.png" alt="Snipaste_2018-11-21_21-25-40"></p><p><strong>总图</strong></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-21_21-26-35.png" alt="Snipaste_2018-11-21_21-26-35"></p><h4 id="新建PCB文件"><a href="#新建PCB文件" class="headerlink" title="新建PCB文件"></a>新建PCB文件</h4><p>略</p><h4 id="设置环境参数"><a href="#设置环境参数" class="headerlink" title="设置环境参数"></a>设置环境参数</h4><h5 id="单位切换："><a href="#单位切换：" class="headerlink" title="单位切换："></a>单位切换：</h5><p>【视图】/【切换单位】切换公制（mm）和英制（mil）,通常用公制</p><h5 id="设置栅格（最左右上角，如下图）"><a href="#设置栅格（最左右上角，如下图）" class="headerlink" title="设置栅格（最左右上角，如下图）"></a>设置栅格（最左右上角，如下图）</h5><p>栅格分为可视栅格(Visible Grid)、捕获栅格(snap grid)、元件放置捕获栅格(Component Grid)、电气栅格(Electrical Grid)</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-21_21-46-33.png" alt="Snipaste_2018-11-21_21-46-33"></p><h5 id="设定PCB尺寸"><a href="#设定PCB尺寸" class="headerlink" title="设定PCB尺寸"></a>设定PCB尺寸</h5><p>a.【放置】/【禁止布线】/【线径】画出尺寸</p><p>b.Ctrl+A选中边框，【设计】/【板子形状】/【按照选择对象设定】</p><p>4.放置PCB原点：【编辑】/【原点】/【放置】</p><h4 id="导入原理图数据"><a href="#导入原理图数据" class="headerlink" title="导入原理图数据"></a>导入原理图数据</h4><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-21_22-35-54.png" alt="Snipaste_2018-11-21_22-35-54"></p><p>点击执行变更-&gt;关闭</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-21_22-36-26.png" alt="Snipaste_2018-11-21_22-36-26"></p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-21_22-38-07.png" alt="Snipaste_2018-11-21_22-38-07"></p><h4 id="设置Mask规则"><a href="#设置Mask规则" class="headerlink" title="设置Mask规则"></a>设置Mask规则</h4><p>【设计】/【规则】</p><p>不了解，略</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-21_22-43-44.png" alt="Snipaste_2018-11-21_22-43-44"></p><h4 id="设置布线规则"><a href="#设置布线规则" class="headerlink" title="设置布线规则"></a>设置布线规则</h4><p>不了解，略</p><p>设置一般导线宽度，即信号线的导线宽度，手工制板1mm</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-21_22-49-12.png" alt="Snipaste_2018-11-21_22-49-12"></p><h4 id="pcb布线是的常见操作"><a href="#pcb布线是的常见操作" class="headerlink" title="pcb布线是的常见操作"></a>pcb布线是的常见操作</h4><h5 id="PCB的定位"><a href="#PCB的定位" class="headerlink" title="PCB的定位"></a>PCB的定位</h5><p>菜单【编辑】/【跳转】可以直接跳转到相应的器件、网络、位置、焊盘、字符串，可用于快速的查找。</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-21_22-57-49.png" alt="Snipaste_2018-11-21_22-57-49"></p><h5 id="修改焊盘"><a href="#修改焊盘" class="headerlink" title="修改焊盘"></a>修改焊盘</h5><p>双击一个焊盘，在属性窗口中修改。</p><h5 id="批量修改焊盘"><a href="#批量修改焊盘" class="headerlink" title="批量修改焊盘"></a>批量修改焊盘</h5><p>在PCB设计区，按SHIFT+F键，选中一个焊盘，弹出“发现相似目标”窗口，将Hole<br>Size,X Size,Y Size改为“Same”,单击“确定”，编辑器将选中所有具有以上三个相同参数的焊盘。</p><h5 id="撤消布线"><a href="#撤消布线" class="headerlink" title="撤消布线"></a>撤消布线</h5><p>【布线】/【取消布线】</p><h4 id="布线结果"><a href="#布线结果" class="headerlink" title="布线结果"></a>布线结果</h4><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-21_23-17-42.png" alt="Snipaste_2018-11-21_23-17-42"></p><h4 id="设计规则检查"><a href="#设计规则检查" class="headerlink" title="设计规则检查"></a>设计规则检查</h4><p>【工具】/【设计规则检查】，在对话框内单击运行DRC。查看结果</p><p><img src="http://pih78q7ac.bkt.clouddn.com/Snipaste_2018-11-21_23-21-17.png" alt="Snipaste_2018-11-21_23-21-17"></p><p>无错误，OK</p><h3 id="PCB拼板"><a href="#PCB拼板" class="headerlink" title="PCB拼板"></a>PCB拼板</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;资料&quot;&gt;&lt;a href=&quot;#资料&quot; class=&quot;headerlink&quot; title=&quot;资料&quot;&gt;&lt;/a&gt;资料&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;软件：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​      Altium Designer 17链接：&lt;a href=&quot;https://pan.baidu.com/s/1YQuqvZi4rBtrRoqoq-R3Iw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1YQuqvZi4rBtrRoqoq-R3Iw&lt;/a&gt; 密码：cnjg&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;视频：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​      &lt;a href=&quot;https://www.bilibili.com/video/av16825310&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Altium Designer 17 绘制89C51开发板全程实战视频&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文档：&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Altium Designer 17 学习" scheme="https://github.com/SetCalm/setcalm.github.io/categories/Altium-Designer-17-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="AD17" scheme="https://github.com/SetCalm/setcalm.github.io/tags/AD17/"/>
    
  </entry>
  
  <entry>
    <title>视频</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/%E8%A7%86%E9%A2%91.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/视频.html</id>
    <published>2018-11-14T13:01:33.000Z</published>
    <updated>2018-11-14T13:04:49.716Z</updated>
    
    <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=24897960&cid=42007944&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="500px"> </iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;//player.bilibili.com/player.html?aid=24897960&amp;cid=42007944&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitHub+Hexo搭建博客心得</title>
    <link href="https://github.com/SetCalm/setcalm.github.io/GitHub-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%BF%83%E5%BE%97.html"/>
    <id>https://github.com/SetCalm/setcalm.github.io/GitHub-Hexo搭建博客心得.html</id>
    <published>2018-11-02T16:00:00.000Z</published>
    <updated>2018-11-09T14:30:04.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为甚麽会想起搭建一个个人博客"><a href="#为甚麽会想起搭建一个个人博客" class="headerlink" title="为甚麽会想起搭建一个个人博客"></a>为甚麽会想起搭建一个个人博客</h3><p>欢迎来到我的博客，这是我的第一篇博客。说起来这是我很久就有的想法。要知道很多专业类知识博客才有解答，接触多了也想搭建一个博客。这里有一个博客要推荐：<a href="https://wdxtub.com/" target="_blank" rel="noopener">小土刀</a>.该博客的优雅，简洁，干净，无广告让我下定决心自己也弄一个博客。<br><a id="more"></a><br>以前使用过notepad++，有道，为知作笔记。但各有缺陷，不全面。用起来没手感。且一段时间后内容又凌乱，不好整理。且图片，视频，代码高亮显示等缺少。只适合日常笔记，不适合学习笔记，知识整理。</p><p>博客的搭建主要为了以后学习笔记，日常记录，记录下成长中的时间轴。</p><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p>视频网站：<a href="https://www.bilibili.com/video/av24897960/?p=1" target="_blank" rel="noopener">手把手教你搭建属于自己的hexo+github博客</a></p><p>nodejs官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>GitHub官网:  <a href="https://github.com/">https://github.com/</a></p><p>Hexo官网：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></p><p>视频网站内容很详细，按照主播的顺序操作就行。建议使用Google或Firefox浏览器。GitHub注册用Firefox浏览器，别的浏览器注册时会页面无法刷新。</p><p>其实博客搭建过程不难，主要祖册GitHub麻烦（使用Firefox浏览器），和博客部署有点困难。另外需要会使用cmd命令（window+R），有Linux经验的会说so easy 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为甚麽会想起搭建一个个人博客&quot;&gt;&lt;a href=&quot;#为甚麽会想起搭建一个个人博客&quot; class=&quot;headerlink&quot; title=&quot;为甚麽会想起搭建一个个人博客&quot;&gt;&lt;/a&gt;为甚麽会想起搭建一个个人博客&lt;/h3&gt;&lt;p&gt;欢迎来到我的博客，这是我的第一篇博客。说起来这是我很久就有的想法。要知道很多专业类知识博客才有解答，接触多了也想搭建一个博客。这里有一个博客要推荐：&lt;a href=&quot;https://wdxtub.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小土刀&lt;/a&gt;.该博客的优雅，简洁，干净，无广告让我下定决心自己也弄一个博客。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
